# Generated from jac.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3s")
        buf.write("\u04a0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\3\2\5\2\u00d4\n\2\3\2\7\2\u00d7\n\2\f\2\16")
        buf.write("\2\u00da\13\2\3\2\7\2\u00dd\n\2\f\2\16\2\u00e0\13\2\3")
        buf.write("\2\3\2\3\3\3\3\3\3\3\3\5\3\u00e8\n\3\3\4\3\4\3\4\3\4\5")
        buf.write("\4\u00ee\n\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\5\5\u00f8")
        buf.write("\n\5\3\5\3\5\5\5\u00fc\n\5\3\5\3\5\3\5\5\5\u0101\n\5\3")
        buf.write("\5\3\5\5\5\u0105\n\5\3\5\3\5\3\5\5\5\u010a\n\5\3\5\3\5")
        buf.write("\5\5\u010e\n\5\3\5\3\5\3\5\5\5\u0113\n\5\3\5\3\5\5\5\u0117")
        buf.write("\n\5\3\5\3\5\3\5\3\5\5\5\u011d\n\5\3\5\3\5\5\5\u0121\n")
        buf.write("\5\3\5\3\5\3\5\5\5\u0126\n\5\3\5\3\5\5\5\u012a\n\5\5\5")
        buf.write("\u012c\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u0133\n\6\3\7\3\7\3")
        buf.write("\7\5\7\u0138\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0142")
        buf.write("\n\b\f\b\16\b\u0145\13\b\3\b\3\b\3\t\3\t\3\t\3\t\7\t\u014d")
        buf.write("\n\t\f\t\16\t\u0150\13\t\3\t\3\t\3\t\3\t\3\t\7\t\u0157")
        buf.write("\n\t\f\t\16\t\u015a\13\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\5\t\u0164\n\t\3\t\3\t\3\t\5\t\u0169\n\t\3\t\5\t\u016c")
        buf.write("\n\t\3\n\3\n\7\n\u0170\n\n\f\n\16\n\u0173\13\n\3\n\5\n")
        buf.write("\u0176\n\n\3\n\3\n\7\n\u017a\n\n\f\n\16\n\u017d\13\n\3")
        buf.write("\n\5\n\u0180\n\n\3\n\3\n\3\13\3\13\5\13\u0186\n\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\5\13\u018d\n\13\3\13\3\13\3\13\5")
        buf.write("\13\u0192\n\13\3\13\3\13\5\13\u0196\n\13\3\13\3\13\5\13")
        buf.write("\u019a\n\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\16\3\16\3\16")
        buf.write("\3\16\3\17\3\17\3\17\3\17\3\20\3\20\7\20\u01ad\n\20\f")
        buf.write("\20\16\20\u01b0\13\20\3\20\3\20\3\20\3\20\5\20\u01b6\n")
        buf.write("\20\3\21\3\21\5\21\u01ba\n\21\3\22\3\22\7\22\u01be\n\22")
        buf.write("\f\22\16\22\u01c1\13\22\3\22\3\22\3\22\3\22\5\22\u01c7")
        buf.write("\n\22\3\23\7\23\u01ca\n\23\f\23\16\23\u01cd\13\23\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\5\24\u01dd\n\24\3\25\3\25\3\25\3\25\3\25\3")
        buf.write("\26\3\26\3\26\3\26\7\26\u01e8\n\26\f\26\16\26\u01eb\13")
        buf.write("\26\3\26\3\26\3\27\5\27\u01f0\n\27\3\27\5\27\u01f3\n\27")
        buf.write("\3\27\3\27\3\27\3\27\5\27\u01f9\n\27\3\30\3\30\3\30\3")
        buf.write("\30\3\30\5\30\u0200\n\30\3\30\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u0207\n\30\7\30\u0209\n\30\f\30\16\30\u020c\13\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u0213\n\30\3\30\5\30\u0216\n")
        buf.write("\30\3\31\3\31\5\31\u021a\n\31\3\31\3\31\3\32\3\32\5\32")
        buf.write("\u0220\n\32\3\32\3\32\3\32\5\32\u0225\n\32\3\33\3\33\3")
        buf.write("\33\3\33\3\34\3\34\3\34\7\34\u022e\n\34\f\34\16\34\u0231")
        buf.write("\13\34\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0239\n\35\3")
        buf.write("\36\3\36\3\36\7\36\u023e\n\36\f\36\16\36\u0241\13\36\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u024a\n\37\f\37")
        buf.write("\16\37\u024d\13\37\3 \3 \7 \u0251\n \f \16 \u0254\13 ")
        buf.write('\3 \3 \3 \5 \u0259\n \3!\3!\3!\3"\3"\3"\3"\3"\3"')
        buf.write('\3"\3"\3"\3"\3"\3"\3"\3"\3"\3"\3"\3"\5"\u0270')
        buf.write('\n"\3#\3#\3#\3#\7#\u0276\n#\f#\16#\u0279\13#\3#\5#\u027c')
        buf.write("\n#\3$\3$\3$\5$\u0281\n$\3%\3%\3%\3%\5%\u0287\n%\3%\3")
        buf.write("%\3%\3%\5%\u028d\n%\3%\5%\u0290\n%\3&\3&\3&\3&\3'\3'")
        buf.write("\3'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u02a5\n(\3")
        buf.write("(\3(\3(\3(\5(\u02ab\n(\3)\3)\3)\3)\3*\3*\3+\3+\3+\3,\3")
        buf.write(",\3,\3,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u02c5\n-\3")
        buf.write(".\3.\3.\3.\5.\u02cb\n.\3/\3/\3/\3/\3\60\3\60\3\60\5\60")
        buf.write("\u02d4\n\60\3\60\3\60\3\60\5\60\u02d9\n\60\3\61\3\61\3")
        buf.write("\61\5\61\u02de\n\61\3\62\3\62\3\62\3\62\3\62\5\62\u02e5")
        buf.write("\n\62\3\63\3\63\3\63\3\63\5\63\u02eb\n\63\3\64\3\64\3")
        buf.write("\64\3\65\3\65\3\65\3\66\3\66\3\66\3\67\3\67\3\67\3\67")
        buf.write("\5\67\u02fa\n\67\3\67\3\67\5\67\u02fe\n\67\38\38\38\7")
        buf.write("8\u0303\n8\f8\168\u0306\138\39\39\39\39\39\39\79\u030e")
        buf.write("\n9\f9\169\u0311\139\59\u0313\n9\3:\3:\3:\3:\3:\3:\3:")
        buf.write("\3:\5:\u031d\n:\3;\3;\3;\3<\3<\3<\7<\u0325\n<\f<\16<\u0328")
        buf.write("\13<\3=\3=\3=\7=\u032d\n=\f=\16=\u0330\13=\3>\3>\3>\5")
        buf.write(">\u0335\n>\3?\3?\3?\7?\u033a\n?\f?\16?\u033d\13?\3@\3")
        buf.write("@\3@\3@\5@\u0343\n@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\5A\u0357\nA\3A\3A\3A\3A\3A\3A\5A\u035f")
        buf.write("\nA\3A\3A\7A\u0363\nA\fA\16A\u0366\13A\3B\3B\3B\3B\3B")
        buf.write("\3B\3B\5B\u036f\nB\3B\3B\3B\3B\5B\u0375\nB\5B\u0377\n")
        buf.write("B\3C\3C\3C\3C\5C\u037d\nC\3D\3D\3D\3E\3E\3E\3F\3F\3F\3")
        buf.write("F\3F\3F\5F\u038b\nF\3G\3G\3H\3H\3I\3I\3I\3I\3I\3I\3I\3")
        buf.write("I\5I\u0399\nI\3I\3I\3I\3I\3I\5I\u03a0\nI\5I\u03a2\nI\3")
        buf.write("J\3J\3J\3J\5J\u03a8\nJ\3J\3J\3J\3J\3J\5J\u03af\nJ\5J\u03b1")
        buf.write("\nJ\3K\3K\3K\5K\u03b6\nK\3K\3K\3K\3K\3K\5K\u03bd\nK\3")
        buf.write("L\3L\5L\u03c1\nL\3L\5L\u03c4\nL\3L\3L\5L\u03c8\nL\5L\u03ca")
        buf.write("\nL\3M\3M\3M\3N\3N\3N\3O\3O\3O\3P\3P\3P\3Q\3Q\3Q\5Q\u03db")
        buf.write("\nQ\3R\3R\3R\3R\3R\5R\u03e2\nR\3R\5R\u03e5\nR\3R\5R\u03e8")
        buf.write("\nR\3S\3S\3S\3S\3S\5S\u03ef\nS\3S\5S\u03f2\nS\3S\5S\u03f5")
        buf.write("\nS\3T\3T\3T\3T\3T\5T\u03fc\nT\3T\5T\u03ff\nT\3T\5T\u0402")
        buf.write("\nT\3U\3U\3U\5U\u0407\nU\3V\3V\3V\3V\3V\5V\u040e\nV\3")
        buf.write("V\5V\u0411\nV\3V\5V\u0414\nV\3W\3W\3W\3W\3W\5W\u041b\n")
        buf.write("W\3W\5W\u041e\nW\3W\5W\u0421\nW\3X\3X\3X\3X\3X\5X\u0428")
        buf.write("\nX\3X\5X\u042b\nX\3X\5X\u042e\nX\3Y\3Y\5Y\u0432\nY\3")
        buf.write("Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0440\nZ\3[\3[\3")
        buf.write("[\3[\7[\u0446\n[\f[\16[\u0449\13[\5[\u044b\n[\3[\3[\3")
        buf.write("\\\3\\\3\\\3\\\3]\3]\3]\3^\3^\3^\3^\5^\u045a\n^\3_\3_")
        buf.write("\3_\3`\5`\u0460\n`\3`\3`\5`\u0464\n`\3a\5a\u0467\na\3")
        buf.write("a\3a\3b\3b\5b\u046d\nb\3b\3b\5b\u0471\nb\3c\3c\5c\u0475")
        buf.write("\nc\3d\3d\3d\3d\7d\u047b\nd\fd\16d\u047e\13d\5d\u0480")
        buf.write("\nd\3d\3d\3e\3e\3e\3e\7e\u0488\ne\fe\16e\u048b\13e\5e")
        buf.write("\u048d\ne\3e\3e\3f\3f\3f\3f\3g\3g\3g\3g\3h\3h\3i\6i\u049c")
        buf.write("\ni\ri\16i\u049d\3i\2\3\u0080j\2\4\6\b\n\f\16\20\22\24")
        buf.write('\26\30\32\34\36 "$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX')
        buf.write("Z\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\2\13")
        buf.write('\4\2\33\34""\4\2GHKK\3\29<\3\2>?\3\2_`\3\2ac\3\2\37')
        buf.write("!\4\2\36\36nn\5\2\16\24\26\26\61\61\2\u0503\2\u00d3\3")
        buf.write("\2\2\2\4\u00e3\3\2\2\2\6\u00e9\3\2\2\2\b\u012b\3\2\2\2")
        buf.write("\n\u0132\3\2\2\2\f\u0137\3\2\2\2\16\u0139\3\2\2\2\20\u016b")
        buf.write("\3\2\2\2\22\u016d\3\2\2\2\24\u0183\3\2\2\2\26\u019b\3")
        buf.write("\2\2\2\30\u019e\3\2\2\2\32\u01a2\3\2\2\2\34\u01a6\3\2")
        buf.write('\2\2\36\u01b5\3\2\2\2 \u01b9\3\2\2\2"\u01c6\3\2\2\2$')
        buf.write("\u01cb\3\2\2\2&\u01dc\3\2\2\2(\u01de\3\2\2\2*\u01e3\3")
        buf.write("\2\2\2,\u01ef\3\2\2\2.\u0215\3\2\2\2\60\u0217\3\2\2\2")
        buf.write("\62\u021d\3\2\2\2\64\u0226\3\2\2\2\66\u022a\3\2\2\28\u0238")
        buf.write("\3\2\2\2:\u023a\3\2\2\2<\u0242\3\2\2\2>\u0258\3\2\2\2")
        buf.write("@\u025a\3\2\2\2B\u026f\3\2\2\2D\u0271\3\2\2\2F\u027d\3")
        buf.write("\2\2\2H\u028f\3\2\2\2J\u0291\3\2\2\2L\u0295\3\2\2\2N\u02aa")
        buf.write("\3\2\2\2P\u02ac\3\2\2\2R\u02b0\3\2\2\2T\u02b2\3\2\2\2")
        buf.write("V\u02b5\3\2\2\2X\u02c4\3\2\2\2Z\u02ca\3\2\2\2\\\u02cc")
        buf.write("\3\2\2\2^\u02d0\3\2\2\2`\u02da\3\2\2\2b\u02df\3\2\2\2")
        buf.write("d\u02e6\3\2\2\2f\u02ec\3\2\2\2h\u02ef\3\2\2\2j\u02f2\3")
        buf.write("\2\2\2l\u02f5\3\2\2\2n\u02ff\3\2\2\2p\u0312\3\2\2\2r\u031c")
        buf.write("\3\2\2\2t\u031e\3\2\2\2v\u0321\3\2\2\2x\u0329\3\2\2\2")
        buf.write("z\u0334\3\2\2\2|\u0336\3\2\2\2~\u033e\3\2\2\2\u0080\u035e")
        buf.write("\3\2\2\2\u0082\u0376\3\2\2\2\u0084\u037c\3\2\2\2\u0086")
        buf.write("\u037e\3\2\2\2\u0088\u0381\3\2\2\2\u008a\u038a\3\2\2\2")
        buf.write("\u008c\u038c\3\2\2\2\u008e\u038e\3\2\2\2\u0090\u03a1\3")
        buf.write("\2\2\2\u0092\u03b0\3\2\2\2\u0094\u03b5\3\2\2\2\u0096\u03c9")
        buf.write("\3\2\2\2\u0098\u03cb\3\2\2\2\u009a\u03ce\3\2\2\2\u009c")
        buf.write("\u03d1\3\2\2\2\u009e\u03d4\3\2\2\2\u00a0\u03da\3\2\2\2")
        buf.write("\u00a2\u03e7\3\2\2\2\u00a4\u03f4\3\2\2\2\u00a6\u0401\3")
        buf.write("\2\2\2\u00a8\u0406\3\2\2\2\u00aa\u0413\3\2\2\2\u00ac\u0420")
        buf.write("\3\2\2\2\u00ae\u042d\3\2\2\2\u00b0\u042f\3\2\2\2\u00b2")
        buf.write("\u043f\3\2\2\2\u00b4\u0441\3\2\2\2\u00b6\u044e\3\2\2\2")
        buf.write("\u00b8\u0452\3\2\2\2\u00ba\u0459\3\2\2\2\u00bc\u045b\3")
        buf.write("\2\2\2\u00be\u045f\3\2\2\2\u00c0\u0466\3\2\2\2\u00c2\u046a")
        buf.write("\3\2\2\2\u00c4\u0472\3\2\2\2\u00c6\u0476\3\2\2\2\u00c8")
        buf.write("\u0483\3\2\2\2\u00ca\u0490\3\2\2\2\u00cc\u0494\3\2\2\2")
        buf.write("\u00ce\u0498\3\2\2\2\u00d0\u049b\3\2\2\2\u00d2\u00d4\5")
        buf.write("\4\3\2\u00d3\u00d2\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d8")
        buf.write("\3\2\2\2\u00d5\u00d7\5\6\4\2\u00d6\u00d5\3\2\2\2\u00d7")
        buf.write("\u00da\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d8\u00d9\3\2\2\2")
        buf.write("\u00d9\u00de\3\2\2\2\u00da\u00d8\3\2\2\2\u00db\u00dd\5")
        buf.write("\f\7\2\u00dc\u00db\3\2\2\2\u00dd\u00e0\3\2\2\2\u00de\u00dc")
        buf.write("\3\2\2\2\u00de\u00df\3\2\2\2\u00df\u00e1\3\2\2\2\u00e0")
        buf.write("\u00de\3\2\2\2\u00e1\u00e2\7\2\2\3\u00e2\3\3\2\2\2\u00e3")
        buf.write("\u00e4\7\3\2\2\u00e4\u00e5\7$\2\2\u00e5\u00e7\7j\2\2\u00e6")
        buf.write("\u00e8\7\67\2\2\u00e7\u00e6\3\2\2\2\u00e7\u00e8\3\2\2")
        buf.write("\2\u00e8\5\3\2\2\2\u00e9\u00ea\7#\2\2\u00ea\u00ed\7/\2")
        buf.write("\2\u00eb\u00ee\5\b\5\2\u00ec\u00ee\7a\2\2\u00ed\u00eb")
        buf.write("\3\2\2\2\u00ed\u00ec\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef")
        buf.write("\u00f0\7\60\2\2\u00f0\u00f1\7\32\2\2\u00f1\u00f2\7j\2")
        buf.write("\2\u00f2\u00f3\7\67\2\2\u00f3\7\3\2\2\2\u00f4\u00f7\7")
        buf.write("+\2\2\u00f5\u00f8\7a\2\2\u00f6\u00f8\5\n\6\2\u00f7\u00f5")
        buf.write("\3\2\2\2\u00f7\u00f6\3\2\2\2\u00f8\u00fb\3\2\2\2\u00f9")
        buf.write("\u00fa\7]\2\2\u00fa\u00fc\5\b\5\2\u00fb\u00f9\3\2\2\2")
        buf.write("\u00fb\u00fc\3\2\2\2\u00fc\u012c\3\2\2\2\u00fd\u0100\7")
        buf.write(")\2\2\u00fe\u0101\7a\2\2\u00ff\u0101\5\n\6\2\u0100\u00fe")
        buf.write("\3\2\2\2\u0100\u00ff\3\2\2\2\u0101\u0104\3\2\2\2\u0102")
        buf.write("\u0103\7]\2\2\u0103\u0105\5\b\5\2\u0104\u0102\3\2\2\2")
        buf.write("\u0104\u0105\3\2\2\2\u0105\u012c\3\2\2\2\u0106\u0109\7")
        buf.write("*\2\2\u0107\u010a\7a\2\2\u0108\u010a\5\n\6\2\u0109\u0107")
        buf.write("\3\2\2\2\u0109\u0108\3\2\2\2\u010a\u010d\3\2\2\2\u010b")
        buf.write("\u010c\7]\2\2\u010c\u010e\5\b\5\2\u010d\u010b\3\2\2\2")
        buf.write("\u010d\u010e\3\2\2\2\u010e\u012c\3\2\2\2\u010f\u0112\7")
        buf.write(",\2\2\u0110\u0113\7a\2\2\u0111\u0113\5\n\6\2\u0112\u0110")
        buf.write("\3\2\2\2\u0112\u0111\3\2\2\2\u0113\u0116\3\2\2\2\u0114")
        buf.write("\u0115\7]\2\2\u0115\u0117\5\b\5\2\u0116\u0114\3\2\2\2")
        buf.write("\u0116\u0117\3\2\2\2\u0117\u012c\3\2\2\2\u0118\u0119\7")
        buf.write("[\2\2\u0119\u011c\7%\2\2\u011a\u011d\7a\2\2\u011b\u011d")
        buf.write("\5\n\6\2\u011c\u011a\3\2\2\2\u011c\u011b\3\2\2\2\u011d")
        buf.write("\u0120\3\2\2\2\u011e\u011f\7]\2\2\u011f\u0121\5\b\5\2")
        buf.write("\u0120\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u012c\3")
        buf.write("\2\2\2\u0122\u0125\7-\2\2\u0123\u0126\7a\2\2\u0124\u0126")
        buf.write("\5\n\6\2\u0125\u0123\3\2\2\2\u0125\u0124\3\2\2\2\u0126")
        buf.write("\u0129\3\2\2\2\u0127\u0128\7]\2\2\u0128\u012a\5\b\5\2")
        buf.write("\u0129\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012c\3")
        buf.write("\2\2\2\u012b\u00f4\3\2\2\2\u012b\u00fd\3\2\2\2\u012b\u0106")
        buf.write("\3\2\2\2\u012b\u010f\3\2\2\2\u012b\u0118\3\2\2\2\u012b")
        buf.write("\u0122\3\2\2\2\u012c\t\3\2\2\2\u012d\u0133\7n\2\2\u012e")
        buf.write("\u012f\7/\2\2\u012f\u0130\5\66\34\2\u0130\u0131\7\60\2")
        buf.write("\2\u0131\u0133\3\2\2\2\u0132\u012d\3\2\2\2\u0132\u012e")
        buf.write("\3\2\2\2\u0133\13\3\2\2\2\u0134\u0138\5\16\b\2\u0135\u0138")
        buf.write("\5\20\t\2\u0136\u0138\5\24\13\2\u0137\u0134\3\2\2\2\u0137")
        buf.write("\u0135\3\2\2\2\u0137\u0136\3\2\2\2\u0138\r\3\2\2\2\u0139")
        buf.write("\u013a\7[\2\2\u013a\u013b\7n\2\2\u013b\u013c\78\2\2\u013c")
        buf.write("\u0143\5d\63\2\u013d\u013e\7]\2\2\u013e\u013f\7n\2\2\u013f")
        buf.write("\u0140\78\2\2\u0140\u0142\5d\63\2\u0141\u013d\3\2\2\2")
        buf.write("\u0142\u0145\3\2\2\2\u0143\u0141\3\2\2\2\u0143\u0144\3")
        buf.write("\2\2\2\u0144\u0146\3\2\2\2\u0145\u0143\3\2\2\2\u0146\u0147")
        buf.write("\7\67\2\2\u0147\17\3\2\2\2\u0148\u0149\7\26\2\2\u0149")
        buf.write("\u014e\7n\2\2\u014a\u014b\7$\2\2\u014b\u014d\7n\2\2\u014c")
        buf.write("\u014a\3\2\2\2\u014d\u0150\3\2\2\2\u014e\u014c\3\2\2\2")
        buf.write("\u014e\u014f\3\2\2\2\u014f\u0151\3\2\2\2\u0150\u014e\3")
        buf.write("\2\2\2\u0151\u016c\5\36\20\2\u0152\u0153\7\61\2\2\u0153")
        buf.write("\u0158\7n\2\2\u0154\u0155\7$\2\2\u0155\u0157\7n\2\2\u0156")
        buf.write("\u0154\3\2\2\2\u0157\u015a\3\2\2\2\u0158\u0156\3\2\2\2")
        buf.write("\u0158\u0159\3\2\2\2\u0159\u015b\3\2\2\2\u015a\u0158\3")
        buf.write("\2\2\2\u015b\u016c\5\36\20\2\u015c\u015d\7\24\2\2\u015d")
        buf.write('\u015e\7n\2\2\u015e\u016c\5"\22\2\u015f\u0160\7\25\2')
        buf.write("\2\u0160\u0161\7n\2\2\u0161\u016c\5&\24\2\u0162\u0164")
        buf.write("\7\63\2\2\u0163\u0162\3\2\2\2\u0163\u0164\3\2\2\2\u0164")
        buf.write("\u0165\3\2\2\2\u0165\u0166\7\62\2\2\u0166\u0168\7n\2\2")
        buf.write("\u0167\u0169\5\26\f\2\u0168\u0167\3\2\2\2\u0168\u0169")
        buf.write("\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016c\5\22\n\2\u016b")
        buf.write("\u0148\3\2\2\2\u016b\u0152\3\2\2\2\u016b\u015c\3\2\2\2")
        buf.write("\u016b\u015f\3\2\2\2\u016b\u0163\3\2\2\2\u016c\21\3\2")
        buf.write("\2\2\u016d\u0171\7/\2\2\u016e\u0170\5 \21\2\u016f\u016e")
        buf.write("\3\2\2\2\u0170\u0173\3\2\2\2\u0171\u016f\3\2\2\2\u0171")
        buf.write("\u0172\3\2\2\2\u0172\u0175\3\2\2\2\u0173\u0171\3\2\2\2")
        buf.write("\u0174\u0176\5\30\r\2\u0175\u0174\3\2\2\2\u0175\u0176")
        buf.write('\3\2\2\2\u0176\u017b\3\2\2\2\u0177\u017a\5B"\2\u0178')
        buf.write("\u017a\5\34\17\2\u0179\u0177\3\2\2\2\u0179\u0178\3\2\2")
        buf.write("\2\u017a\u017d\3\2\2\2\u017b\u0179\3\2\2\2\u017b\u017c")
        buf.write("\3\2\2\2\u017c\u017f\3\2\2\2\u017d\u017b\3\2\2\2\u017e")
        buf.write("\u0180\5\32\16\2\u017f\u017e\3\2\2\2\u017f\u0180\3\2\2")
        buf.write("\2\u0180\u0181\3\2\2\2\u0181\u0182\7\60\2\2\u0182\23\3")
        buf.write("\2\2\2\u0183\u0185\7\65\2\2\u0184\u0186\7n\2\2\u0185\u0184")
        buf.write("\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187\3\2\2\2\u0187")
        buf.write("\u0188\5\u00d0i\2\u0188\u018c\7\32\2\2\u0189\u018d\5\u009c")
        buf.write("O\2\u018a\u018b\7\25\2\2\u018b\u018d\5&\24\2\u018c\u0189")
        buf.write("\3\2\2\2\u018c\u018a\3\2\2\2\u018d\u018e\3\2\2\2\u018e")
        buf.write("\u0199\7E\2\2\u018f\u0191\5\u009aN\2\u0190\u0192\5\u00c6")
        buf.write("d\2\u0191\u0190\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0195")
        buf.write("\3\2\2\2\u0193\u0196\5> \2\u0194\u0196\7\67\2\2\u0195")
        buf.write("\u0193\3\2\2\2\u0195\u0194\3\2\2\2\u0196\u019a\3\2\2\2")
        buf.write("\u0197\u0198\7\62\2\2\u0198\u019a\5\22\n\2\u0199\u018f")
        buf.write("\3\2\2\2\u0199\u0197\3\2\2\2\u019a\25\3\2\2\2\u019b\u019c")
        buf.write("\7$\2\2\u019c\u019d\5\66\34\2\u019d\27\3\2\2\2\u019e\u019f")
        buf.write("\7\32\2\2\u019f\u01a0\7\33\2\2\u01a0\u01a1\5> \2\u01a1")
        buf.write("\31\3\2\2\2\u01a2\u01a3\7\32\2\2\u01a3\u01a4\7\34\2\2")
        buf.write("\u01a4\u01a5\5> \2\u01a5\33\3\2\2\2\u01a6\u01a7\7\32\2")
        buf.write('\2\u01a7\u01a8\7"\2\2\u01a8\u01a9\5> \2\u01a9\35\3\2')
        buf.write("\2\2\u01aa\u01ae\7/\2\2\u01ab\u01ad\5 \21\2\u01ac\u01ab")
        buf.write("\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2\u01ae")
        buf.write("\u01af\3\2\2\2\u01af\u01b1\3\2\2\2\u01b0\u01ae\3\2\2\2")
        buf.write("\u01b1\u01b6\7\60\2\2\u01b2\u01b3\7$\2\2\u01b3\u01b6\5")
        buf.write(" \21\2\u01b4\u01b6\7\67\2\2\u01b5\u01aa\3\2\2\2\u01b5")
        buf.write("\u01b2\3\2\2\2\u01b5\u01b4\3\2\2\2\u01b6\37\3\2\2\2\u01b7")
        buf.write("\u01ba\5*\26\2\u01b8\u01ba\5.\30\2\u01b9\u01b7\3\2\2\2")
        buf.write("\u01b9\u01b8\3\2\2\2\u01ba!\3\2\2\2\u01bb\u01bf\7/\2\2")
        buf.write("\u01bc\u01be\5*\26\2\u01bd\u01bc\3\2\2\2\u01be\u01c1\3")
        buf.write("\2\2\2\u01bf\u01bd\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c2")
        buf.write("\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c2\u01c7\7\60\2\2\u01c3")
        buf.write("\u01c4\7$\2\2\u01c4\u01c7\5*\26\2\u01c5\u01c7\7\67\2\2")
        buf.write("\u01c6\u01bb\3\2\2\2\u01c6\u01c3\3\2\2\2\u01c6\u01c5\3")
        buf.write("\2\2\2\u01c7#\3\2\2\2\u01c8\u01ca\5.\30\2\u01c9\u01c8")
        buf.write("\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cb")
        buf.write("\u01cc\3\2\2\2\u01cc%\3\2\2\2\u01cd\u01cb\3\2\2\2\u01ce")
        buf.write("\u01cf\7/\2\2\u01cf\u01d0\5(\25\2\u01d0\u01d1\5$\23\2")
        buf.write("\u01d1\u01d2\7\31\2\2\u01d2\u01d3\5> \2\u01d3\u01d4\7")
        buf.write("\60\2\2\u01d4\u01dd\3\2\2\2\u01d5\u01d6\7$\2\2\u01d6\u01d7")
        buf.write("\5(\25\2\u01d7\u01d8\5$\23\2\u01d8\u01d9\7\31\2\2\u01d9")
        buf.write("\u01da\5> \2\u01da\u01db\7\67\2\2\u01db\u01dd\3\2\2\2")
        buf.write("\u01dc\u01ce\3\2\2\2\u01dc\u01d5\3\2\2\2\u01dd'\3\2\2")
        buf.write("\2\u01de\u01df\7Z\2\2\u01df\u01e0\7Y\2\2\u01e0\u01e1\7")
        buf.write("n\2\2\u01e1\u01e2\7\67\2\2\u01e2)\3\2\2\2\u01e3\u01e4")
        buf.write("\7Z\2\2\u01e4\u01e9\5,\27\2\u01e5\u01e6\7]\2\2\u01e6\u01e8")
        buf.write("\5,\27\2\u01e7\u01e5\3\2\2\2\u01e8\u01eb\3\2\2\2\u01e9")
        buf.write("\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01ec\3\2\2\2")
        buf.write("\u01eb\u01e9\3\2\2\2\u01ec\u01ed\7\67\2\2\u01ed+\3\2\2")
        buf.write("\2\u01ee\u01f0\7\\\2\2\u01ef\u01ee\3\2\2\2\u01ef\u01f0")
        buf.write("\3\2\2\2\u01f0\u01f2\3\2\2\2\u01f1\u01f3\7Y\2\2\u01f2")
        buf.write("\u01f1\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\u01f8\3\2\2\2")
        buf.write("\u01f4\u01f9\7n\2\2\u01f5\u01f6\7n\2\2\u01f6\u01f7\78")
        buf.write("\2\2\u01f7\u01f9\5d\63\2\u01f8\u01f4\3\2\2\2\u01f8\u01f5")
        buf.write("\3\2\2\2\u01f9-\3\2\2\2\u01fa\u01fb\7^\2\2\u01fb\u01ff")
        buf.write("\5\64\33\2\u01fc\u01fd\5\62\32\2\u01fd\u01fe\5\60\31\2")
        buf.write("\u01fe\u0200\3\2\2\2\u01ff\u01fc\3\2\2\2\u01ff\u0200\3")
        buf.write("\2\2\2\u0200\u020a\3\2\2\2\u0201\u0202\7]\2\2\u0202\u0206")
        buf.write("\5\64\33\2\u0203\u0204\5\62\32\2\u0204\u0205\5\60\31\2")
        buf.write("\u0205\u0207\3\2\2\2\u0206\u0203\3\2\2\2\u0206\u0207\3")
        buf.write("\2\2\2\u0207\u0209\3\2\2\2\u0208\u0201\3\2\2\2\u0209\u020c")
        buf.write("\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u020b\3\2\2\2\u020b")
        buf.write("\u020d\3\2\2\2\u020c\u020a\3\2\2\2\u020d\u020e\7\67\2")
        buf.write("\2\u020e\u0216\3\2\2\2\u020f\u0210\7^\2\2\u0210\u0212")
        buf.write("\7n\2\2\u0211\u0213\5\60\31\2\u0212\u0211\3\2\2\2\u0212")
        buf.write("\u0213\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0216\5> \2\u0215")
        buf.write("\u01fa\3\2\2\2\u0215\u020f\3\2\2\2\u0216/\3\2\2\2\u0217")
        buf.write("\u0219\7\32\2\2\u0218\u021a\5\66\34\2\u0219\u0218\3\2")
        buf.write("\2\2\u0219\u021a\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021c")
        buf.write("\t\2\2\2\u021c\61\3\2\2\2\u021d\u021f\7%\2\2\u021e\u0220")
        buf.write("\58\35\2\u021f\u021e\3\2\2\2\u021f\u0220\3\2\2\2\u0220")
        buf.write("\u0224\3\2\2\2\u0221\u0225\7%\2\2\u0222\u0223\7.\2\2\u0223")
        buf.write("\u0225\5d\63\2\u0224\u0221\3\2\2\2\u0224\u0222\3\2\2\2")
        buf.write("\u0225\63\3\2\2\2\u0226\u0227\7n\2\2\u0227\u0228\7P\2")
        buf.write("\2\u0228\u0229\7n\2\2\u0229\65\3\2\2\2\u022a\u022f\7n")
        buf.write("\2\2\u022b\u022c\7]\2\2\u022c\u022e\7n\2\2\u022d\u022b")
        buf.write("\3\2\2\2\u022e\u0231\3\2\2\2\u022f\u022d\3\2\2\2\u022f")
        buf.write("\u0230\3\2\2\2\u0230\67\3\2\2\2\u0231\u022f\3\2\2\2\u0232")
        buf.write("\u0239\5:\36\2\u0233\u0239\5<\37\2\u0234\u0235\5:\36\2")
        buf.write("\u0235\u0236\7]\2\2\u0236\u0237\5<\37\2\u0237\u0239\3")
        buf.write("\2\2\2\u0238\u0232\3\2\2\2\u0238\u0233\3\2\2\2\u0238\u0234")
        buf.write("\3\2\2\2\u02399\3\2\2\2\u023a\u023f\5l\67\2\u023b\u023c")
        buf.write("\7]\2\2\u023c\u023e\5l\67\2\u023d\u023b\3\2\2\2\u023e")
        buf.write("\u0241\3\2\2\2\u023f\u023d\3\2\2\2\u023f\u0240\3\2\2\2")
        buf.write("\u0240;\3\2\2\2\u0241\u023f\3\2\2\2\u0242\u0243\7n\2\2")
        buf.write("\u0243\u0244\78\2\2\u0244\u024b\5l\67\2\u0245\u0246\7")
        buf.write("]\2\2\u0246\u0247\7n\2\2\u0247\u0248\78\2\2\u0248\u024a")
        buf.write("\5l\67\2\u0249\u0245\3\2\2\2\u024a\u024d\3\2\2\2\u024b")
        buf.write("\u0249\3\2\2\2\u024b\u024c\3\2\2\2\u024c=\3\2\2\2\u024d")
        buf.write('\u024b\3\2\2\2\u024e\u0252\7/\2\2\u024f\u0251\5B"\2\u0250')
        buf.write("\u024f\3\2\2\2\u0251\u0254\3\2\2\2\u0252\u0250\3\2\2\2")
        buf.write("\u0252\u0253\3\2\2\2\u0253\u0255\3\2\2\2\u0254\u0252\3")
        buf.write("\2\2\2\u0255\u0259\7\60\2\2\u0256\u0257\7$\2\2\u0257\u0259")
        buf.write('\5B"\2\u0258\u024e\3\2\2\2\u0258\u0256\3\2\2\2\u0259')
        buf.write("?\3\2\2\2\u025a\u025b\5\66\34\2\u025b\u025c\5> \2\u025c")
        buf.write("A\3\2\2\2\u025d\u0270\5> \2\u025e\u0270\5@!\2\u025f\u0260")
        buf.write("\5d\63\2\u0260\u0261\7\67\2\2\u0261\u0270\3\2\2\2\u0262")
        buf.write("\u0270\5D#\2\u0263\u0270\5F$\2\u0264\u0270\5N(\2\u0265")
        buf.write("\u0270\5P)\2\u0266\u0267\5T+\2\u0267\u0268\7\67\2\2\u0268")
        buf.write("\u0270\3\2\2\2\u0269\u026a\5R*\2\u026a\u026b\7\67\2\2")
        buf.write("\u026b\u0270\3\2\2\2\u026c\u0270\5V,\2\u026d\u0270\5X")
        buf.write("-\2\u026e\u0270\5Z.\2\u026f\u025d\3\2\2\2\u026f\u025e")
        buf.write("\3\2\2\2\u026f\u025f\3\2\2\2\u026f\u0262\3\2\2\2\u026f")
        buf.write("\u0263\3\2\2\2\u026f\u0264\3\2\2\2\u026f\u0265\3\2\2\2")
        buf.write("\u026f\u0266\3\2\2\2\u026f\u0269\3\2\2\2\u026f\u026c\3")
        buf.write("\2\2\2\u026f\u026d\3\2\2\2\u026f\u026e\3\2\2\2\u0270C")
        buf.write("\3\2\2\2\u0271\u0272\7@\2\2\u0272\u0273\5d\63\2\u0273")
        buf.write("\u0277\5> \2\u0274\u0276\5J&\2\u0275\u0274\3\2\2\2\u0276")
        buf.write("\u0279\3\2\2\2\u0277\u0275\3\2\2\2\u0277\u0278\3\2\2\2")
        buf.write("\u0278\u027b\3\2\2\2\u0279\u0277\3\2\2\2\u027a\u027c\5")
        buf.write("L'\2\u027b\u027a\3\2\2\2\u027b\u027c\3\2\2\2\u027cE\3")
        buf.write("\2\2\2\u027d\u027e\7N\2\2\u027e\u0280\5> \2\u027f\u0281")
        buf.write("\5H%\2\u0280\u027f\3\2\2\2\u0280\u0281\3\2\2\2\u0281G")
        buf.write("\3\2\2\2\u0282\u0286\7B\2\2\u0283\u0284\7e\2\2\u0284\u0285")
        buf.write("\7n\2\2\u0285\u0287\7f\2\2\u0286\u0283\3\2\2\2\u0286\u0287")
        buf.write("\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u0290\5> \2\u0289\u028c")
        buf.write("\7B\2\2\u028a\u028b\7\32\2\2\u028b\u028d\7n\2\2\u028c")
        buf.write("\u028a\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028e\3\2\2\2")
        buf.write("\u028e\u0290\5> \2\u028f\u0282\3\2\2\2\u028f\u0289\3\2")
        buf.write("\2\2\u0290I\3\2\2\2\u0291\u0292\7A\2\2\u0292\u0293\5d")
        buf.write("\63\2\u0293\u0294\5> \2\u0294K\3\2\2\2\u0295\u0296\7B")
        buf.write("\2\2\u0296\u0297\5> \2\u0297M\3\2\2\2\u0298\u0299\7C\2")
        buf.write("\2\u0299\u029a\5d\63\2\u029a\u029b\7D\2\2\u029b\u029c")
        buf.write("\5d\63\2\u029c\u029d\7E\2\2\u029d\u029e\5d\63\2\u029e")
        buf.write("\u029f\5> \2\u029f\u02ab\3\2\2\2\u02a0\u02a1\7C\2\2\u02a1")
        buf.write("\u02a4\7n\2\2\u02a2\u02a3\7]\2\2\u02a3\u02a5\7n\2\2\u02a4")
        buf.write("\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a6\3\2\2\2")
        buf.write("\u02a6\u02a7\7X\2\2\u02a7\u02a8\5d\63\2\u02a8\u02a9\5")
        buf.write("> \2\u02a9\u02ab\3\2\2\2\u02aa\u0298\3\2\2\2\u02aa\u02a0")
        buf.write("\3\2\2\2\u02abO\3\2\2\2\u02ac\u02ad\7F\2\2\u02ad\u02ae")
        buf.write("\5d\63\2\u02ae\u02af\5> \2\u02afQ\3\2\2\2\u02b0\u02b1")
        buf.write("\t\3\2\2\u02b1S\3\2\2\2\u02b2\u02b3\7\66\2\2\u02b3\u02b4")
        buf.write("\5d\63\2\u02b4U\3\2\2\2\u02b5\u02b6\7M\2\2\u02b6\u02b7")
        buf.write("\5d\63\2\u02b7\u02b8\7\67\2\2\u02b8W\3\2\2\2\u02b9\u02ba")
        buf.write("\7L\2\2\u02ba\u02bb\5d\63\2\u02bb\u02bc\7\67\2\2\u02bc")
        buf.write("\u02c5\3\2\2\2\u02bd\u02be\7L\2\2\u02be\u02bf\7$\2\2\u02bf")
        buf.write("\u02c0\7n\2\2\u02c0\u02c1\78\2\2\u02c1\u02c2\5d\63\2\u02c2")
        buf.write("\u02c3\7\67\2\2\u02c3\u02c5\3\2\2\2\u02c4\u02b9\3\2\2")
        buf.write("\2\u02c4\u02bd\3\2\2\2\u02c5Y\3\2\2\2\u02c6\u02cb\5\\")
        buf.write("/\2\u02c7\u02cb\5^\60\2\u02c8\u02cb\5`\61\2\u02c9\u02cb")
        buf.write("\5b\62\2\u02ca\u02c6\3\2\2\2\u02ca\u02c7\3\2\2\2\u02ca")
        buf.write("\u02c8\3\2\2\2\u02ca\u02c9\3\2\2\2\u02cb[\3\2\2\2\u02cc")
        buf.write("\u02cd\7\27\2\2\u02cd\u02ce\5d\63\2\u02ce\u02cf\7\67\2")
        buf.write("\2\u02cf]\3\2\2\2\u02d0\u02d3\7\30\2\2\u02d1\u02d2\7$")
        buf.write("\2\2\u02d2\u02d4\7n\2\2\u02d3\u02d1\3\2\2\2\u02d3\u02d4")
        buf.write("\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d8\5d\63\2\u02d6")
        buf.write("\u02d9\7\67\2\2\u02d7\u02d9\5L'\2\u02d8\u02d6\3\2\2\2")
        buf.write("\u02d8\u02d7\3\2\2\2\u02d9_\3\2\2\2\u02da\u02dd\7I\2\2")
        buf.write("\u02db\u02de\5X-\2\u02dc\u02de\7\67\2\2\u02dd\u02db\3")
        buf.write("\2\2\2\u02dd\u02dc\3\2\2\2\u02dea\3\2\2\2\u02df\u02e4")
        buf.write("\7J\2\2\u02e0\u02e5\5X-\2\u02e1\u02e5\5`\61\2\u02e2\u02e5")
        buf.write("\5^\60\2\u02e3\u02e5\7\67\2\2\u02e4\u02e0\3\2\2\2\u02e4")
        buf.write("\u02e1\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e4\u02e3\3\2\2\2")
        buf.write("\u02e5c\3\2\2\2\u02e6\u02ea\5l\67\2\u02e7\u02eb\5f\64")
        buf.write("\2\u02e8\u02eb\5h\65\2\u02e9\u02eb\5j\66\2\u02ea\u02e7")
        buf.write("\3\2\2\2\u02ea\u02e8\3\2\2\2\u02ea\u02e9\3\2\2\2\u02ea")
        buf.write("\u02eb\3\2\2\2\u02ebe\3\2\2\2\u02ec\u02ed\78\2\2\u02ed")
        buf.write("\u02ee\5d\63\2\u02eeg\3\2\2\2\u02ef\u02f0\7=\2\2\u02f0")
        buf.write("\u02f1\5d\63\2\u02f1i\3\2\2\2\u02f2\u02f3\t\4\2\2\u02f3")
        buf.write("\u02f4\5d\63\2\u02f4k\3\2\2\2\u02f5\u02fd\5n8\2\u02f6")
        buf.write("\u02f7\7Q\2\2\u02f7\u02fa\5\u00a0Q\2\u02f8\u02fa\5\u00a8")
        buf.write("U\2\u02f9\u02f6\3\2\2\2\u02f9\u02f8\3\2\2\2\u02fa\u02fb")
        buf.write("\3\2\2\2\u02fb\u02fc\5d\63\2\u02fc\u02fe\3\2\2\2\u02fd")
        buf.write("\u02f9\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fem\3\2\2\2\u02ff")
        buf.write("\u0304\5p9\2\u0300\u0301\t\5\2\2\u0301\u0303\5p9\2\u0302")
        buf.write("\u0300\3\2\2\2\u0303\u0306\3\2\2\2\u0304\u0302\3\2\2\2")
        buf.write("\u0304\u0305\3\2\2\2\u0305o\3\2\2\2\u0306\u0304\3\2\2")
        buf.write("\2\u0307\u0308\7Q\2\2\u0308\u0313\5p9\2\u0309\u030f\5")
        buf.write("v<\2\u030a\u030b\5r:\2\u030b\u030c\5v<\2\u030c\u030e\3")
        buf.write("\2\2\2\u030d\u030a\3\2\2\2\u030e\u0311\3\2\2\2\u030f\u030d")
        buf.write("\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0313\3\2\2\2\u0311")
        buf.write("\u030f\3\2\2\2\u0312\u0307\3\2\2\2\u0312\u0309\3\2\2\2")
        buf.write("\u0313q\3\2\2\2\u0314\u031d\7R\2\2\u0315\u031d\7S\2\2")
        buf.write("\u0316\u031d\7T\2\2\u0317\u031d\7U\2\2\u0318\u031d\7V")
        buf.write("\2\2\u0319\u031d\7W\2\2\u031a\u031d\7X\2\2\u031b\u031d")
        buf.write("\5t;\2\u031c\u0314\3\2\2\2\u031c\u0315\3\2\2\2\u031c\u0316")
        buf.write("\3\2\2\2\u031c\u0317\3\2\2\2\u031c\u0318\3\2\2\2\u031c")
        buf.write("\u0319\3\2\2\2\u031c\u031a\3\2\2\2\u031c\u031b\3\2\2\2")
        buf.write("\u031ds\3\2\2\2\u031e\u031f\7Q\2\2\u031f\u0320\7X\2\2")
        buf.write("\u0320u\3\2\2\2\u0321\u0326\5x=\2\u0322\u0323\t\6\2\2")
        buf.write("\u0323\u0325\5x=\2\u0324\u0322\3\2\2\2\u0325\u0328\3\2")
        buf.write("\2\2\u0326\u0324\3\2\2\2\u0326\u0327\3\2\2\2\u0327w\3")
        buf.write("\2\2\2\u0328\u0326\3\2\2\2\u0329\u032e\5z>\2\u032a\u032b")
        buf.write("\t\7\2\2\u032b\u032d\5z>\2\u032c\u032a\3\2\2\2\u032d\u0330")
        buf.write("\3\2\2\2\u032e\u032c\3\2\2\2\u032e\u032f\3\2\2\2\u032f")
        buf.write("y\3\2\2\2\u0330\u032e\3\2\2\2\u0331\u0332\t\6\2\2\u0332")
        buf.write("\u0335\5z>\2\u0333\u0335\5|?\2\u0334\u0331\3\2\2\2\u0334")
        buf.write("\u0333\3\2\2\2\u0335{\3\2\2\2\u0336\u033b\5\u0080A\2\u0337")
        buf.write("\u0338\7d\2\2\u0338\u033a\5z>\2\u0339\u0337\3\2\2\2\u033a")
        buf.write("\u033d\3\2\2\2\u033b\u0339\3\2\2\2\u033b\u033c\3\2\2\2")
        buf.write("\u033c}\3\2\2\2\u033d\u033b\3\2\2\2\u033e\u033f\7[\2\2")
        buf.write("\u033f\u0342\7P\2\2\u0340\u0343\5\u008eH\2\u0341\u0343")
        buf.write("\7n\2\2\u0342\u0340\3\2\2\2\u0342\u0341\3\2\2\2\u0343")
        buf.write("\177\3\2\2\2\u0344\u0345\bA\1\2\u0345\u035f\7l\2\2\u0346")
        buf.write("\u035f\7i\2\2\u0347\u035f\5\u00d0i\2\u0348\u035f\7k\2")
        buf.write("\2\u0349\u035f\7m\2\2\u034a\u035f\7n\2\2\u034b\u035f\5")
        buf.write("~@\2\u034c\u035f\5\u0096L\2\u034d\u035f\5\u00b0Y\2\u034e")
        buf.write("\u035f\5\u00b4[\2\u034f\u0350\7e\2\2\u0350\u0351\5d\63")
        buf.write("\2\u0351\u0352\7f\2\2\u0352\u035f\3\2\2\2\u0353\u0354")
        buf.write("\5\u0084C\2\u0354\u0356\7n\2\2\u0355\u0357\5\u00c6d\2")
        buf.write("\u0356\u0355\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u035f\3")
        buf.write("\2\2\2\u0358\u0359\7\64\2\2\u0359\u035f\5\u0080A\7\u035a")
        buf.write("\u035f\5\u00b8]\2\u035b\u035f\5\u0086D\2\u035c\u035f\5")
        buf.write("\u0088E\2\u035d\u035f\5\u00ceh\2\u035e\u0344\3\2\2\2\u035e")
        buf.write("\u0346\3\2\2\2\u035e\u0347\3\2\2\2\u035e\u0348\3\2\2\2")
        buf.write("\u035e\u0349\3\2\2\2\u035e\u034a\3\2\2\2\u035e\u034b\3")
        buf.write("\2\2\2\u035e\u034c\3\2\2\2\u035e\u034d\3\2\2\2\u035e\u034e")
        buf.write("\3\2\2\2\u035e\u034f\3\2\2\2\u035e\u0353\3\2\2\2\u035e")
        buf.write("\u0358\3\2\2\2\u035e\u035a\3\2\2\2\u035e\u035b\3\2\2\2")
        buf.write("\u035e\u035c\3\2\2\2\u035e\u035d\3\2\2\2\u035f\u0364\3")
        buf.write("\2\2\2\u0360\u0361\f\b\2\2\u0361\u0363\5\u0082B\2\u0362")
        buf.write("\u0360\3\2\2\2\u0363\u0366\3\2\2\2\u0364\u0362\3\2\2\2")
        buf.write("\u0364\u0365\3\2\2\2\u0365\u0081\3\2\2\2\u0366\u0364\3")
        buf.write("\2\2\2\u0367\u0368\7P\2\2\u0368\u0377\5\u008aF\2\u0369")
        buf.write("\u036a\7P\2\2\u036a\u0377\7n\2\2\u036b\u0377\5\u00b2Z")
        buf.write("\2\u036c\u036e\7e\2\2\u036d\u036f\58\35\2\u036e\u036d")
        buf.write("\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0370\3\2\2\2\u0370")
        buf.write("\u0377\7f\2\2\u0371\u0372\5\u0084C\2\u0372\u0374\7n\2")
        buf.write("\2\u0373\u0375\5\u00c6d\2\u0374\u0373\3\2\2\2\u0374\u0375")
        buf.write("\3\2\2\2\u0375\u0377\3\2\2\2\u0376\u0367\3\2\2\2\u0376")
        buf.write("\u0369\3\2\2\2\u0376\u036b\3\2\2\2\u0376\u036c\3\2\2\2")
        buf.write("\u0376\u0371\3\2\2\2\u0377\u0083\3\2\2\2\u0378\u037d\7")
        buf.write("%\2\2\u0379\u037a\7%\2\2\u037a\u037b\7n\2\2\u037b\u037d")
        buf.write("\7$\2\2\u037c\u0378\3\2\2\2\u037c\u0379\3\2\2\2\u037d")
        buf.write("\u0085\3\2\2\2\u037e\u037f\7O\2\2\u037f\u0380\5\u0080")
        buf.write("A\2\u0380\u0087\3\2\2\2\u0381\u0382\7a\2\2\u0382\u0383")
        buf.write("\5\u0080A\2\u0383\u0089\3\2\2\2\u0384\u038b\3\2\2\2\u0385")
        buf.write("\u038b\5\u0094K\2\u0386\u038b\5\u0090I\2\u0387\u038b\5")
        buf.write("\u0092J\2\u0388\u038b\5\u008eH\2\u0389\u038b\5\u008cG")
        buf.write("\2\u038a\u0384\3\2\2\2\u038a\u0385\3\2\2\2\u038a\u0386")
        buf.write("\3\2\2\2\u038a\u0387\3\2\2\2\u038a\u0388\3\2\2\2\u038a")
        buf.write("\u0389\3\2\2\2\u038b\u008b\3\2\2\2\u038c\u038d\5\u00ce")
        buf.write("h\2\u038d\u008d\3\2\2\2\u038e\u038f\t\b\2\2\u038f\u008f")
        buf.write("\3\2\2\2\u0390\u03a2\7\36\2\2\u0391\u0392\7/\2\2\u0392")
        buf.write("\u0393\5\66\34\2\u0393\u0394\7\60\2\2\u0394\u03a2\3\2")
        buf.write("\2\2\u0395\u0396\7\22\2\2\u0396\u0399\7%\2\2\u0397\u0399")
        buf.write("\7(\2\2\u0398\u0395\3\2\2\2\u0398\u0397\3\2\2\2\u0399")
        buf.write("\u039a\3\2\2\2\u039a\u039f\t\t\2\2\u039b\u039c\7e\2\2")
        buf.write("\u039c\u039d\5:\36\2\u039d\u039e\7f\2\2\u039e\u03a0\3")
        buf.write("\2\2\2\u039f\u039b\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a2")
        buf.write("\3\2\2\2\u03a1\u0390\3\2\2\2\u03a1\u0391\3\2\2\2\u03a1")
        buf.write("\u0398\3\2\2\2\u03a2\u0091\3\2\2\2\u03a3\u03b1\7\35\2")
        buf.write("\2\u03a4\u03a5\7\21\2\2\u03a5\u03a8\7%\2\2\u03a6\u03a8")
        buf.write("\7'\2\2\u03a7\u03a4\3\2\2\2\u03a7\u03a6\3\2\2\2\u03a8")
        buf.write("\u03a9\3\2\2\2\u03a9\u03ae\7n\2\2\u03aa\u03ab\7e\2\2\u03ab")
        buf.write("\u03ac\5:\36\2\u03ac\u03ad\7f\2\2\u03ad\u03af\3\2\2\2")
        buf.write("\u03ae\u03aa\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b1\3")
        buf.write("\2\2\2\u03b0\u03a3\3\2\2\2\u03b0\u03a7\3\2\2\2\u03b1\u0093")
        buf.write("\3\2\2\2\u03b2\u03b3\7\16\2\2\u03b3\u03b6\7%\2\2\u03b4")
        buf.write("\u03b6\7&\2\2\u03b5\u03b2\3\2\2\2\u03b5\u03b4\3\2\2\2")
        buf.write("\u03b6\u03b7\3\2\2\2\u03b7\u03bc\7n\2\2\u03b8\u03b9\7")
        buf.write("e\2\2\u03b9\u03ba\5:\36\2\u03ba\u03bb\7f\2\2\u03bb\u03bd")
        buf.write("\3\2\2\2\u03bc\u03b8\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd")
        buf.write("\u0095\3\2\2\2\u03be\u03c0\5\u0098M\2\u03bf\u03c1\5\u00c8")
        buf.write("e\2\u03c0\u03bf\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c3")
        buf.write("\3\2\2\2\u03c2\u03c4\5\u0096L\2\u03c3\u03c2\3\2\2\2\u03c3")
        buf.write("\u03c4\3\2\2\2\u03c4\u03ca\3\2\2\2\u03c5\u03c7\5\u00a0")
        buf.write("Q\2\u03c6\u03c8\5\u0096L\2\u03c7\u03c6\3\2\2\2\u03c7\u03c8")
        buf.write("\3\2\2\2\u03c8\u03ca\3\2\2\2\u03c9\u03be\3\2\2\2\u03c9")
        buf.write("\u03c5\3\2\2\2\u03ca\u0097\3\2\2\2\u03cb\u03cc\7)\2\2")
        buf.write("\u03cc\u03cd\7n\2\2\u03cd\u0099\3\2\2\2\u03ce\u03cf\7")
        buf.write("+\2\2\u03cf\u03d0\7n\2\2\u03d0\u009b\3\2\2\2\u03d1\u03d2")
        buf.write("\7,\2\2\u03d2\u03d3\7n\2\2\u03d3\u009d\3\2\2\2\u03d4\u03d5")
        buf.write("\7-\2\2\u03d5\u03d6\7n\2\2\u03d6\u009f\3\2\2\2\u03d7\u03db")
        buf.write("\5\u00a2R\2\u03d8\u03db\5\u00a4S\2\u03d9\u03db\5\u00a6")
        buf.write("T\2\u03da\u03d7\3\2\2\2\u03da\u03d8\3\2\2\2\u03da\u03d9")
        buf.write("\3\2\2\2\u03db\u00a1\3\2\2\2\u03dc\u03e8\7\4\2\2\u03dd")
        buf.write("\u03e4\7`\2\2\u03de\u03df\7g\2\2\u03df\u03e1\7n\2\2\u03e0")
        buf.write("\u03e2\5\u00c8e\2\u03e1\u03e0\3\2\2\2\u03e1\u03e2\3\2")
        buf.write("\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e5\7h\2\2\u03e4\u03de")
        buf.write("\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6")
        buf.write("\u03e8\7\5\2\2\u03e7\u03dc\3\2\2\2\u03e7\u03dd\3\2\2\2")
        buf.write("\u03e8\u00a3\3\2\2\2\u03e9\u03f5\7\6\2\2\u03ea\u03f1\7")
        buf.write("\7\2\2\u03eb\u03ec\7g\2\2\u03ec\u03ee\7n\2\2\u03ed\u03ef")
        buf.write("\5\u00c8e\2\u03ee\u03ed\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef")
        buf.write("\u03f0\3\2\2\2\u03f0\u03f2\7h\2\2\u03f1\u03eb\3\2\2\2")
        buf.write("\u03f1\u03f2\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f5\7")
        buf.write("`\2\2\u03f4\u03e9\3\2\2\2\u03f4\u03ea\3\2\2\2\u03f5\u00a5")
        buf.write("\3\2\2\2\u03f6\u0402\7\b\2\2\u03f7\u03fe\7\7\2\2\u03f8")
        buf.write("\u03f9\7g\2\2\u03f9\u03fb\7n\2\2\u03fa\u03fc\5\u00c8e")
        buf.write("\2\u03fb\u03fa\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd")
        buf.write("\3\2\2\2\u03fd\u03ff\7h\2\2\u03fe\u03f8\3\2\2\2\u03fe")
        buf.write("\u03ff\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0402\7\5\2\2")
        buf.write("\u0401\u03f6\3\2\2\2\u0401\u03f7\3\2\2\2\u0402\u00a7\3")
        buf.write("\2\2\2\u0403\u0407\5\u00aaV\2\u0404\u0407\5\u00acW\2\u0405")
        buf.write("\u0407\5\u00aeX\2\u0406\u0403\3\2\2\2\u0406\u0404\3\2")
        buf.write("\2\2\u0406\u0405\3\2\2\2\u0407\u00a9\3\2\2\2\u0408\u0414")
        buf.write("\7\t\2\2\u0409\u0410\7_\2\2\u040a\u040b\7g\2\2\u040b\u040d")
        buf.write("\7n\2\2\u040c\u040e\5\u00c6d\2\u040d\u040c\3\2\2\2\u040d")
        buf.write("\u040e\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0411\7h\2\2")
        buf.write("\u0410\u040a\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412\3")
        buf.write("\2\2\2\u0412\u0414\7\n\2\2\u0413\u0408\3\2\2\2\u0413\u0409")
        buf.write("\3\2\2\2\u0414\u00ab\3\2\2\2\u0415\u0421\7\13\2\2\u0416")
        buf.write("\u041d\7\f\2\2\u0417\u0418\7g\2\2\u0418\u041a\7n\2\2\u0419")
        buf.write("\u041b\5\u00c6d\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2")
        buf.write("\2\2\u041b\u041c\3\2\2\2\u041c\u041e\7h\2\2\u041d\u0417")
        buf.write("\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041f\3\2\2\2\u041f")
        buf.write("\u0421\7_\2\2\u0420\u0415\3\2\2\2\u0420\u0416\3\2\2\2")
        buf.write("\u0421\u00ad\3\2\2\2\u0422\u042e\7\r\2\2\u0423\u042a\7")
        buf.write("\f\2\2\u0424\u0425\7g\2\2\u0425\u0427\7n\2\2\u0426\u0428")
        buf.write("\5\u00c6d\2\u0427\u0426\3\2\2\2\u0427\u0428\3\2\2\2\u0428")
        buf.write("\u0429\3\2\2\2\u0429\u042b\7h\2\2\u042a\u0424\3\2\2\2")
        buf.write("\u042a\u042b\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042e\7")
        buf.write("\n\2\2\u042d\u0422\3\2\2\2\u042d\u0423\3\2\2\2\u042e\u00af")
        buf.write("\3\2\2\2\u042f\u0431\7g\2\2\u0430\u0432\5:\36\2\u0431")
        buf.write("\u0430\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0433\3\2\2\2")
        buf.write("\u0433\u0434\7h\2\2\u0434\u00b1\3\2\2\2\u0435\u0436\7")
        buf.write("g\2\2\u0436\u0437\5d\63\2\u0437\u0438\7h\2\2\u0438\u0440")
        buf.write("\3\2\2\2\u0439\u043a\7g\2\2\u043a\u043b\5d\63\2\u043b")
        buf.write("\u043c\7$\2\2\u043c\u043d\5d\63\2\u043d\u043e\7h\2\2\u043e")
        buf.write("\u0440\3\2\2\2\u043f\u0435\3\2\2\2\u043f\u0439\3\2\2\2")
        buf.write("\u0440\u00b3\3\2\2\2\u0441\u044a\7/\2\2\u0442\u0447\5")
        buf.write("\u00b6\\\2\u0443\u0444\7]\2\2\u0444\u0446\5\u00b6\\\2")
        buf.write("\u0445\u0443\3\2\2\2\u0446\u0449\3\2\2\2\u0447\u0445\3")
        buf.write("\2\2\2\u0447\u0448\3\2\2\2\u0448\u044b\3\2\2\2\u0449\u0447")
        buf.write("\3\2\2\2\u044a\u0442\3\2\2\2\u044a\u044b\3\2\2\2\u044b")
        buf.write("\u044c\3\2\2\2\u044c\u044d\7\60\2\2\u044d\u00b5\3\2\2")
        buf.write("\2\u044e\u044f\5d\63\2\u044f\u0450\7$\2\2\u0450\u0451")
        buf.write("\5d\63\2\u0451\u00b7\3\2\2\2\u0452\u0453\7\31\2\2\u0453")
        buf.write("\u0454\5\u00ba^\2\u0454\u00b9\3\2\2\2\u0455\u045a\5\u00be")
        buf.write("`\2\u0456\u045a\5\u00c2b\2\u0457\u045a\5\u00c0a\2\u0458")
        buf.write("\u045a\5\u00c4c\2\u0459\u0455\3\2\2\2\u0459\u0456\3\2")
        buf.write("\2\2\u0459\u0457\3\2\2\2\u0459\u0458\3\2\2\2\u045a\u00bb")
        buf.write("\3\2\2\2\u045b\u045c\5d\63\2\u045c\u045d\5\u00a8U\2\u045d")
        buf.write("\u00bd\3\2\2\2\u045e\u0460\5\u00bc_\2\u045f\u045e\3\2")
        buf.write("\2\2\u045f\u0460\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0463")
        buf.write("\5\u0098M\2\u0462\u0464\5\u00c6d\2\u0463\u0462\3\2\2\2")
        buf.write("\u0463\u0464\3\2\2\2\u0464\u00bf\3\2\2\2\u0465\u0467\5")
        buf.write("\u00bc_\2\u0466\u0465\3\2\2\2\u0466\u0467\3\2\2\2\u0467")
        buf.write("\u0468\3\2\2\2\u0468\u0469\5\u009cO\2\u0469\u00c1\3\2")
        buf.write("\2\2\u046a\u046c\5d\63\2\u046b\u046d\7\64\2\2\u046c\u046b")
        buf.write("\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u046e\3\2\2\2\u046e")
        buf.write("\u0470\5\u009aN\2\u046f\u0471\5\u00c6d\2\u0470\u046f\3")
        buf.write("\2\2\2\u0470\u0471\3\2\2\2\u0471\u00c3\3\2\2\2\u0472\u0474")
        buf.write("\5\u009eP\2\u0473\u0475\5\u00c6d\2\u0474\u0473\3\2\2\2")
        buf.write("\u0474\u0475\3\2\2\2\u0475\u00c5\3\2\2\2\u0476\u047f\7")
        buf.write("e\2\2\u0477\u047c\5\u00caf\2\u0478\u0479\7]\2\2\u0479")
        buf.write("\u047b\5\u00caf\2\u047a\u0478\3\2\2\2\u047b\u047e\3\2")
        buf.write("\2\2\u047c\u047a\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u0480")
        buf.write("\3\2\2\2\u047e\u047c\3\2\2\2\u047f\u0477\3\2\2\2\u047f")
        buf.write("\u0480\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0482\7f\2\2")
        buf.write("\u0482\u00c7\3\2\2\2\u0483\u048c\7e\2\2\u0484\u0489\5")
        buf.write("\u00ccg\2\u0485\u0486\7]\2\2\u0486\u0488\5\u00ccg\2\u0487")
        buf.write("\u0485\3\2\2\2\u0488\u048b\3\2\2\2\u0489\u0487\3\2\2\2")
        buf.write("\u0489\u048a\3\2\2\2\u048a\u048d\3\2\2\2\u048b\u0489\3")
        buf.write("\2\2\2\u048c\u0484\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e")
        buf.write("\3\2\2\2\u048e\u048f\7f\2\2\u048f\u00c9\3\2\2\2\u0490")
        buf.write("\u0491\7n\2\2\u0491\u0492\78\2\2\u0492\u0493\5d\63\2\u0493")
        buf.write("\u00cb\3\2\2\2\u0494\u0495\7n\2\2\u0495\u0496\5r:\2\u0496")
        buf.write("\u0497\5d\63\2\u0497\u00cd\3\2\2\2\u0498\u0499\t\n\2\2")
        buf.write("\u0499\u00cf\3\2\2\2\u049a\u049c\7j\2\2\u049b\u049a\3")
        buf.write("\2\2\2\u049c\u049d\3\2\2\2\u049d\u049b\3\2\2\2\u049d\u049e")
        buf.write("\3\2\2\2\u049e\u00d1\3\2\2\2\u0092\u00d3\u00d8\u00de\u00e7")
        buf.write("\u00ed\u00f7\u00fb\u0100\u0104\u0109\u010d\u0112\u0116")
        buf.write("\u011c\u0120\u0125\u0129\u012b\u0132\u0137\u0143\u014e")
        buf.write("\u0158\u0163\u0168\u016b\u0171\u0175\u0179\u017b\u017f")
        buf.write("\u0185\u018c\u0191\u0195\u0199\u01ae\u01b5\u01b9\u01bf")
        buf.write("\u01c6\u01cb\u01dc\u01e9\u01ef\u01f2\u01f8\u01ff\u0206")
        buf.write("\u020a\u0212\u0215\u0219\u021f\u0224\u022f\u0238\u023f")
        buf.write("\u024b\u0252\u0258\u026f\u0277\u027b\u0280\u0286\u028c")
        buf.write("\u028f\u02a4\u02aa\u02c4\u02ca\u02d3\u02d8\u02dd\u02e4")
        buf.write("\u02ea\u02f9\u02fd\u0304\u030f\u0312\u031c\u0326\u032e")
        buf.write("\u0334\u033b\u0342\u0356\u035e\u0364\u036e\u0374\u0376")
        buf.write("\u037c\u038a\u0398\u039f\u03a1\u03a7\u03ae\u03b0\u03b5")
        buf.write("\u03bc\u03c0\u03c3\u03c7\u03c9\u03da\u03e1\u03e4\u03e7")
        buf.write("\u03ee\u03f1\u03f4\u03fb\u03fe\u0401\u0406\u040d\u0410")
        buf.write("\u0413\u041a\u041d\u0420\u0427\u042a\u042d\u0431\u043f")
        buf.write("\u0447\u044a\u0459\u045f\u0463\u0466\u046c\u0470\u0474")
        buf.write("\u047c\u047f\u0489\u048c\u049d")
        return buf.getvalue()


class jacParser(Parser):

    grammarFileName = "jac.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'version'",
        "'-->'",
        "'->'",
        "'<--'",
        "'<-'",
        "'<-->'",
        "'++>'",
        "'+>'",
        "'<++'",
        "'<+'",
        "'<++>'",
        "'str'",
        "'int'",
        "'float'",
        "'list'",
        "'dict'",
        "'bool'",
        "'type'",
        "'graph'",
        "'node'",
        "'ignore'",
        "'take'",
        "'spawn'",
        "'with'",
        "'entry'",
        "'exit'",
        "'length'",
        "'keys'",
        "'context'",
        "'info'",
        "'details'",
        "'activity'",
        "'import'",
        "':'",
        "'::'",
        "'s::'",
        "'l::'",
        "'d::'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'::>'",
        "'{'",
        "'}'",
        "'edge'",
        "'walker'",
        "'async'",
        "'sync'",
        "'test'",
        "'assert'",
        "';'",
        "'='",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "':='",
        "<INVALID>",
        "<INVALID>",
        "'if'",
        "'elif'",
        "'else'",
        "'for'",
        "'to'",
        "'by'",
        "'while'",
        "'continue'",
        "'break'",
        "'disengage'",
        "'yield'",
        "'skip'",
        "'report'",
        "'destroy'",
        "'try'",
        "'&'",
        "'.'",
        "<INVALID>",
        "'=='",
        "'<'",
        "'>'",
        "'<='",
        "'>='",
        "'!='",
        "'in'",
        "'anchor'",
        "'has'",
        "'global'",
        "'private'",
        "','",
        "'can'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'^'",
        "'('",
        "')'",
        "'['",
        "']'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'null'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "TYP_STRING",
        "TYP_INT",
        "TYP_FLOAT",
        "TYP_LIST",
        "TYP_DICT",
        "TYP_BOOL",
        "KW_TYPE",
        "KW_GRAPH",
        "KW_NODE",
        "KW_IGNORE",
        "KW_TAKE",
        "KW_SPAWN",
        "KW_WITH",
        "KW_ENTRY",
        "KW_EXIT",
        "KW_LENGTH",
        "KW_KEYS",
        "KW_CONTEXT",
        "KW_INFO",
        "KW_DETAILS",
        "KW_ACTIVITY",
        "KW_IMPORT",
        "COLON",
        "DBL_COLON",
        "STR_DBL_COLON",
        "LIST_DBL_COLON",
        "DICT_DBL_COLON",
        "NODE_DBL_COLON",
        "EDGE_DBL_COLON",
        "WALKER_DBL_COLON",
        "GRAPH_DBL_COLON",
        "TYPE_DBL_COLON",
        "COLON_OUT",
        "LBRACE",
        "RBRACE",
        "KW_EDGE",
        "KW_WALKER",
        "KW_ASYNC",
        "KW_SYNC",
        "KW_TEST",
        "KW_ASSERT",
        "SEMI",
        "EQ",
        "PEQ",
        "MEQ",
        "TEQ",
        "DEQ",
        "CPY_EQ",
        "KW_AND",
        "KW_OR",
        "KW_IF",
        "KW_ELIF",
        "KW_ELSE",
        "KW_FOR",
        "KW_TO",
        "KW_BY",
        "KW_WHILE",
        "KW_CONTINUE",
        "KW_BREAK",
        "KW_DISENGAGE",
        "KW_YIELD",
        "KW_SKIP",
        "KW_REPORT",
        "KW_DESTROY",
        "KW_TRY",
        "KW_REF",
        "DOT",
        "NOT",
        "EE",
        "LT",
        "GT",
        "LTE",
        "GTE",
        "NE",
        "KW_IN",
        "KW_ANCHOR",
        "KW_HAS",
        "KW_GLOBAL",
        "KW_PRIVATE",
        "COMMA",
        "KW_CAN",
        "PLUS",
        "MINUS",
        "STAR_MUL",
        "DIV",
        "MOD",
        "POW",
        "LPAREN",
        "RPAREN",
        "LSQUARE",
        "RSQUARE",
        "FLOAT",
        "STRING",
        "BOOL",
        "INT",
        "NULL",
        "NAME",
        "COMMENT",
        "LINE_COMMENT",
        "PY_COMMENT",
        "WS",
        "ErrorChar",
    ]

    RULE_start = 0
    RULE_ver_label = 1
    RULE_import_module = 2
    RULE_import_items = 3
    RULE_import_names = 4
    RULE_element = 5
    RULE_global_var = 6
    RULE_architype = 7
    RULE_walker_block = 8
    RULE_test = 9
    RULE_namespaces = 10
    RULE_walk_entry_block = 11
    RULE_walk_exit_block = 12
    RULE_walk_activity_block = 13
    RULE_attr_block = 14
    RULE_attr_stmt = 15
    RULE_struct_block = 16
    RULE_can_block = 17
    RULE_graph_block = 18
    RULE_has_root = 19
    RULE_has_stmt = 20
    RULE_has_assign = 21
    RULE_can_stmt = 22
    RULE_event_clause = 23
    RULE_preset_in_out = 24
    RULE_dotted_name = 25
    RULE_name_list = 26
    RULE_param_list = 27
    RULE_expr_list = 28
    RULE_kw_expr_list = 29
    RULE_code_block = 30
    RULE_node_ctx_block = 31
    RULE_statement = 32
    RULE_if_stmt = 33
    RULE_try_stmt = 34
    RULE_else_from_try = 35
    RULE_elif_stmt = 36
    RULE_else_stmt = 37
    RULE_for_stmt = 38
    RULE_while_stmt = 39
    RULE_ctrl_stmt = 40
    RULE_assert_stmt = 41
    RULE_destroy_action = 42
    RULE_report_action = 43
    RULE_walker_action = 44
    RULE_ignore_action = 45
    RULE_take_action = 46
    RULE_disengage_action = 47
    RULE_yield_action = 48
    RULE_expression = 49
    RULE_assignment = 50
    RULE_copy_assign = 51
    RULE_inc_assign = 52
    RULE_connect = 53
    RULE_logical = 54
    RULE_compare = 55
    RULE_cmp_op = 56
    RULE_nin = 57
    RULE_arithmetic = 58
    RULE_term = 59
    RULE_factor = 60
    RULE_power = 61
    RULE_global_ref = 62
    RULE_atom = 63
    RULE_atom_trailer = 64
    RULE_ability_op = 65
    RULE_ref = 66
    RULE_deref = 67
    RULE_built_in = 68
    RULE_cast_built_in = 69
    RULE_obj_built_in = 70
    RULE_dict_built_in = 71
    RULE_list_built_in = 72
    RULE_string_built_in = 73
    RULE_node_edge_ref = 74
    RULE_node_ref = 75
    RULE_walker_ref = 76
    RULE_graph_ref = 77
    RULE_type_ref = 78
    RULE_edge_ref = 79
    RULE_edge_to = 80
    RULE_edge_from = 81
    RULE_edge_any = 82
    RULE_connect_op = 83
    RULE_connect_to = 84
    RULE_connect_from = 85
    RULE_connect_any = 86
    RULE_list_val = 87
    RULE_index_slice = 88
    RULE_dict_val = 89
    RULE_kv_pair = 90
    RULE_spawn = 91
    RULE_spawn_object = 92
    RULE_spawn_edge = 93
    RULE_node_spawn = 94
    RULE_graph_spawn = 95
    RULE_walker_spawn = 96
    RULE_type_spawn = 97
    RULE_spawn_ctx = 98
    RULE_filter_ctx = 99
    RULE_spawn_assign = 100
    RULE_filter_compare = 101
    RULE_any_type = 102
    RULE_multistring = 103

    ruleNames = [
        "start",
        "ver_label",
        "import_module",
        "import_items",
        "import_names",
        "element",
        "global_var",
        "architype",
        "walker_block",
        "test",
        "namespaces",
        "walk_entry_block",
        "walk_exit_block",
        "walk_activity_block",
        "attr_block",
        "attr_stmt",
        "struct_block",
        "can_block",
        "graph_block",
        "has_root",
        "has_stmt",
        "has_assign",
        "can_stmt",
        "event_clause",
        "preset_in_out",
        "dotted_name",
        "name_list",
        "param_list",
        "expr_list",
        "kw_expr_list",
        "code_block",
        "node_ctx_block",
        "statement",
        "if_stmt",
        "try_stmt",
        "else_from_try",
        "elif_stmt",
        "else_stmt",
        "for_stmt",
        "while_stmt",
        "ctrl_stmt",
        "assert_stmt",
        "destroy_action",
        "report_action",
        "walker_action",
        "ignore_action",
        "take_action",
        "disengage_action",
        "yield_action",
        "expression",
        "assignment",
        "copy_assign",
        "inc_assign",
        "connect",
        "logical",
        "compare",
        "cmp_op",
        "nin",
        "arithmetic",
        "term",
        "factor",
        "power",
        "global_ref",
        "atom",
        "atom_trailer",
        "ability_op",
        "ref",
        "deref",
        "built_in",
        "cast_built_in",
        "obj_built_in",
        "dict_built_in",
        "list_built_in",
        "string_built_in",
        "node_edge_ref",
        "node_ref",
        "walker_ref",
        "graph_ref",
        "type_ref",
        "edge_ref",
        "edge_to",
        "edge_from",
        "edge_any",
        "connect_op",
        "connect_to",
        "connect_from",
        "connect_any",
        "list_val",
        "index_slice",
        "dict_val",
        "kv_pair",
        "spawn",
        "spawn_object",
        "spawn_edge",
        "node_spawn",
        "graph_spawn",
        "walker_spawn",
        "type_spawn",
        "spawn_ctx",
        "filter_ctx",
        "spawn_assign",
        "filter_compare",
        "any_type",
        "multistring",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    TYP_STRING = 12
    TYP_INT = 13
    TYP_FLOAT = 14
    TYP_LIST = 15
    TYP_DICT = 16
    TYP_BOOL = 17
    KW_TYPE = 18
    KW_GRAPH = 19
    KW_NODE = 20
    KW_IGNORE = 21
    KW_TAKE = 22
    KW_SPAWN = 23
    KW_WITH = 24
    KW_ENTRY = 25
    KW_EXIT = 26
    KW_LENGTH = 27
    KW_KEYS = 28
    KW_CONTEXT = 29
    KW_INFO = 30
    KW_DETAILS = 31
    KW_ACTIVITY = 32
    KW_IMPORT = 33
    COLON = 34
    DBL_COLON = 35
    STR_DBL_COLON = 36
    LIST_DBL_COLON = 37
    DICT_DBL_COLON = 38
    NODE_DBL_COLON = 39
    EDGE_DBL_COLON = 40
    WALKER_DBL_COLON = 41
    GRAPH_DBL_COLON = 42
    TYPE_DBL_COLON = 43
    COLON_OUT = 44
    LBRACE = 45
    RBRACE = 46
    KW_EDGE = 47
    KW_WALKER = 48
    KW_ASYNC = 49
    KW_SYNC = 50
    KW_TEST = 51
    KW_ASSERT = 52
    SEMI = 53
    EQ = 54
    PEQ = 55
    MEQ = 56
    TEQ = 57
    DEQ = 58
    CPY_EQ = 59
    KW_AND = 60
    KW_OR = 61
    KW_IF = 62
    KW_ELIF = 63
    KW_ELSE = 64
    KW_FOR = 65
    KW_TO = 66
    KW_BY = 67
    KW_WHILE = 68
    KW_CONTINUE = 69
    KW_BREAK = 70
    KW_DISENGAGE = 71
    KW_YIELD = 72
    KW_SKIP = 73
    KW_REPORT = 74
    KW_DESTROY = 75
    KW_TRY = 76
    KW_REF = 77
    DOT = 78
    NOT = 79
    EE = 80
    LT = 81
    GT = 82
    LTE = 83
    GTE = 84
    NE = 85
    KW_IN = 86
    KW_ANCHOR = 87
    KW_HAS = 88
    KW_GLOBAL = 89
    KW_PRIVATE = 90
    COMMA = 91
    KW_CAN = 92
    PLUS = 93
    MINUS = 94
    STAR_MUL = 95
    DIV = 96
    MOD = 97
    POW = 98
    LPAREN = 99
    RPAREN = 100
    LSQUARE = 101
    RSQUARE = 102
    FLOAT = 103
    STRING = 104
    BOOL = 105
    INT = 106
    NULL = 107
    NAME = 108
    COMMENT = 109
    LINE_COMMENT = 110
    PY_COMMENT = 111
    WS = 112
    ErrorChar = 113

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class StartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(jacParser.EOF, 0)

        def ver_label(self):
            return self.getTypedRuleContext(jacParser.Ver_labelContext, 0)

        def import_module(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Import_moduleContext)
            else:
                return self.getTypedRuleContext(jacParser.Import_moduleContext, i)

        def element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ElementContext)
            else:
                return self.getTypedRuleContext(jacParser.ElementContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_start

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStart"):
                listener.enterStart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStart"):
                listener.exitStart(self)

    def start(self):

        localctx = jacParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.T__0:
                self.state = 208
                self.ver_label()

            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_IMPORT:
                self.state = 211
                self.import_module()
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_GRAPH)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_WALKER)
                        | (1 << jacParser.KW_ASYNC)
                        | (1 << jacParser.KW_TEST)
                    )
                )
                != 0
            ) or _la == jacParser.KW_GLOBAL:
                self.state = 217
                self.element()
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 223
            self.match(jacParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ver_labelContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ver_label

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVer_label"):
                listener.enterVer_label(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVer_label"):
                listener.exitVer_label(self)

    def ver_label(self):

        localctx = jacParser.Ver_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_ver_label)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(jacParser.T__0)
            self.state = 226
            self.match(jacParser.COLON)
            self.state = 227
            self.match(jacParser.STRING)
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.SEMI:
                self.state = 228
                self.match(jacParser.SEMI)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_moduleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(jacParser.KW_IMPORT, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_module

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_module"):
                listener.enterImport_module(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_module"):
                listener.exitImport_module(self)

    def import_module(self):

        localctx = jacParser.Import_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_import_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.match(jacParser.KW_IMPORT)
            self.state = 232
            self.match(jacParser.LBRACE)
            self.state = 235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                jacParser.NODE_DBL_COLON,
                jacParser.EDGE_DBL_COLON,
                jacParser.WALKER_DBL_COLON,
                jacParser.GRAPH_DBL_COLON,
                jacParser.TYPE_DBL_COLON,
                jacParser.KW_GLOBAL,
            ]:
                self.state = 233
                self.import_items()
                pass
            elif token in [jacParser.STAR_MUL]:
                self.state = 234
                self.match(jacParser.STAR_MUL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 237
            self.match(jacParser.RBRACE)
            self.state = 238
            self.match(jacParser.KW_WITH)
            self.state = 239
            self.match(jacParser.STRING)
            self.state = 240
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_itemsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WALKER_DBL_COLON(self):
            return self.getToken(jacParser.WALKER_DBL_COLON, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def import_names(self):
            return self.getTypedRuleContext(jacParser.Import_namesContext, 0)

        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext, 0)

        def NODE_DBL_COLON(self):
            return self.getToken(jacParser.NODE_DBL_COLON, 0)

        def EDGE_DBL_COLON(self):
            return self.getToken(jacParser.EDGE_DBL_COLON, 0)

        def GRAPH_DBL_COLON(self):
            return self.getToken(jacParser.GRAPH_DBL_COLON, 0)

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def TYPE_DBL_COLON(self):
            return self.getToken(jacParser.TYPE_DBL_COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_items

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_items"):
                listener.enterImport_items(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_items"):
                listener.exitImport_items(self)

    def import_items(self):

        localctx = jacParser.Import_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_import_items)
        self._la = 0  # Token type
        try:
            self.state = 297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.WALKER_DBL_COLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 242
                self.match(jacParser.WALKER_DBL_COLON)
                self.state = 245
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 243
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 244
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 247
                    self.match(jacParser.COMMA)
                    self.state = 248
                    self.import_items()

                pass
            elif token in [jacParser.NODE_DBL_COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 251
                self.match(jacParser.NODE_DBL_COLON)
                self.state = 254
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 252
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 253
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 256
                    self.match(jacParser.COMMA)
                    self.state = 257
                    self.import_items()

                pass
            elif token in [jacParser.EDGE_DBL_COLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 260
                self.match(jacParser.EDGE_DBL_COLON)
                self.state = 263
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 261
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 262
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 265
                    self.match(jacParser.COMMA)
                    self.state = 266
                    self.import_items()

                pass
            elif token in [jacParser.GRAPH_DBL_COLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 269
                self.match(jacParser.GRAPH_DBL_COLON)
                self.state = 272
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 270
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 271
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 274
                    self.match(jacParser.COMMA)
                    self.state = 275
                    self.import_items()

                pass
            elif token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 278
                self.match(jacParser.KW_GLOBAL)
                self.state = 279
                self.match(jacParser.DBL_COLON)
                self.state = 282
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 280
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 281
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 284
                    self.match(jacParser.COMMA)
                    self.state = 285
                    self.import_items()

                pass
            elif token in [jacParser.TYPE_DBL_COLON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 288
                self.match(jacParser.TYPE_DBL_COLON)
                self.state = 291
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 289
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 290
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 293
                    self.match(jacParser.COMMA)
                    self.state = 294
                    self.import_items()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_namesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_names

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_names"):
                listener.enterImport_names(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_names"):
                listener.exitImport_names(self)

    def import_names(self):

        localctx = jacParser.Import_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_import_names)
        try:
            self.state = 304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 299
                self.match(jacParser.NAME)
                pass
            elif token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 300
                self.match(jacParser.LBRACE)
                self.state = 301
                self.name_list()
                self.state = 302
                self.match(jacParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_var(self):
            return self.getTypedRuleContext(jacParser.Global_varContext, 0)

        def architype(self):
            return self.getTypedRuleContext(jacParser.ArchitypeContext, 0)

        def test(self):
            return self.getTypedRuleContext(jacParser.TestContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_element

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement"):
                listener.enterElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement"):
                listener.exitElement(self)

    def element(self):

        localctx = jacParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_element)
        try:
            self.state = 309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 306
                self.global_var()
                pass
            elif token in [
                jacParser.KW_TYPE,
                jacParser.KW_GRAPH,
                jacParser.KW_NODE,
                jacParser.KW_EDGE,
                jacParser.KW_WALKER,
                jacParser.KW_ASYNC,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 307
                self.architype()
                pass
            elif token in [jacParser.KW_TEST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 308
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_varContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def EQ(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_global_var

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_var"):
                listener.enterGlobal_var(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_var"):
                listener.exitGlobal_var(self)

    def global_var(self):

        localctx = jacParser.Global_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_global_var)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(jacParser.KW_GLOBAL)
            self.state = 312
            self.match(jacParser.NAME)
            self.state = 313
            self.match(jacParser.EQ)
            self.state = 314
            self.expression()
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 315
                self.match(jacParser.COMMA)
                self.state = 316
                self.match(jacParser.NAME)
                self.state = 317
                self.match(jacParser.EQ)
                self.state = 318
                self.expression()
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 324
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArchitypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def attr_block(self):
            return self.getTypedRuleContext(jacParser.Attr_blockContext, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_TYPE(self):
            return self.getToken(jacParser.KW_TYPE, 0)

        def struct_block(self):
            return self.getTypedRuleContext(jacParser.Struct_blockContext, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext, 0)

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext, 0)

        def KW_ASYNC(self):
            return self.getToken(jacParser.KW_ASYNC, 0)

        def namespaces(self):
            return self.getTypedRuleContext(jacParser.NamespacesContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_architype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArchitype"):
                listener.enterArchitype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArchitype"):
                listener.exitArchitype(self)

    def architype(self):

        localctx = jacParser.ArchitypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_architype)
        self._la = 0  # Token type
        try:
            self.state = 361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 326
                self.match(jacParser.KW_NODE)
                self.state = 327
                self.match(jacParser.NAME)
                self.state = 332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 328
                        self.match(jacParser.COLON)
                        self.state = 329
                        self.match(jacParser.NAME)
                    self.state = 334
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 335
                self.attr_block()
                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 336
                self.match(jacParser.KW_EDGE)
                self.state = 337
                self.match(jacParser.NAME)
                self.state = 342
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 338
                        self.match(jacParser.COLON)
                        self.state = 339
                        self.match(jacParser.NAME)
                    self.state = 344
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)

                self.state = 345
                self.attr_block()
                pass
            elif token in [jacParser.KW_TYPE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 346
                self.match(jacParser.KW_TYPE)
                self.state = 347
                self.match(jacParser.NAME)
                self.state = 348
                self.struct_block()
                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 349
                self.match(jacParser.KW_GRAPH)
                self.state = 350
                self.match(jacParser.NAME)
                self.state = 351
                self.graph_block()
                pass
            elif token in [jacParser.KW_WALKER, jacParser.KW_ASYNC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_ASYNC:
                    self.state = 352
                    self.match(jacParser.KW_ASYNC)

                self.state = 355
                self.match(jacParser.KW_WALKER)
                self.state = 356
                self.match(jacParser.NAME)
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COLON:
                    self.state = 357
                    self.namespaces()

                self.state = 360
                self.walker_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext, i)

        def walk_entry_block(self):
            return self.getTypedRuleContext(jacParser.Walk_entry_blockContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext, i)

        def walk_activity_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Walk_activity_blockContext)
            else:
                return self.getTypedRuleContext(jacParser.Walk_activity_blockContext, i)

        def walk_exit_block(self):
            return self.getTypedRuleContext(jacParser.Walk_exit_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_block"):
                listener.enterWalker_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_block"):
                listener.exitWalker_block(self)

    def walker_block(self):

        localctx = jacParser.Walker_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_walker_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(jacParser.LBRACE)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_HAS or _la == jacParser.KW_CAN:
                self.state = 364
                self.attr_stmt()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
            if la_ == 1:
                self.state = 370
                self.walk_entry_block()

            self.state = 377
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 375
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        jacParser.T__1,
                        jacParser.T__3,
                        jacParser.T__4,
                        jacParser.T__5,
                        jacParser.TYP_STRING,
                        jacParser.TYP_INT,
                        jacParser.TYP_FLOAT,
                        jacParser.TYP_LIST,
                        jacParser.TYP_DICT,
                        jacParser.TYP_BOOL,
                        jacParser.KW_TYPE,
                        jacParser.KW_NODE,
                        jacParser.KW_IGNORE,
                        jacParser.KW_TAKE,
                        jacParser.KW_SPAWN,
                        jacParser.COLON,
                        jacParser.DBL_COLON,
                        jacParser.NODE_DBL_COLON,
                        jacParser.LBRACE,
                        jacParser.KW_EDGE,
                        jacParser.KW_SYNC,
                        jacParser.KW_ASSERT,
                        jacParser.KW_IF,
                        jacParser.KW_FOR,
                        jacParser.KW_WHILE,
                        jacParser.KW_CONTINUE,
                        jacParser.KW_BREAK,
                        jacParser.KW_DISENGAGE,
                        jacParser.KW_YIELD,
                        jacParser.KW_SKIP,
                        jacParser.KW_REPORT,
                        jacParser.KW_DESTROY,
                        jacParser.KW_TRY,
                        jacParser.KW_REF,
                        jacParser.NOT,
                        jacParser.KW_GLOBAL,
                        jacParser.PLUS,
                        jacParser.MINUS,
                        jacParser.STAR_MUL,
                        jacParser.LPAREN,
                        jacParser.LSQUARE,
                        jacParser.FLOAT,
                        jacParser.STRING,
                        jacParser.BOOL,
                        jacParser.INT,
                        jacParser.NULL,
                        jacParser.NAME,
                    ]:
                        self.state = 373
                        self.statement()
                        pass
                    elif token in [jacParser.KW_WITH]:
                        self.state = 374
                        self.walk_activity_block()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)

            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_WITH:
                self.state = 380
                self.walk_exit_block()

            self.state = 383
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TEST(self):
            return self.getToken(jacParser.KW_TEST, 0)

        def multistring(self):
            return self.getTypedRuleContext(jacParser.MultistringContext, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext, 0)

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_test

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTest"):
                listener.enterTest(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTest"):
                listener.exitTest(self)

    def test(self):

        localctx = jacParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(jacParser.KW_TEST)
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 386
                self.match(jacParser.NAME)

            self.state = 389
            self.multistring()
            self.state = 390
            self.match(jacParser.KW_WITH)
            self.state = 394
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.GRAPH_DBL_COLON]:
                self.state = 391
                self.graph_ref()
                pass
            elif token in [jacParser.KW_GRAPH]:
                self.state = 392
                self.match(jacParser.KW_GRAPH)
                self.state = 393
                self.graph_block()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 396
            self.match(jacParser.KW_BY)
            self.state = 407
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.WALKER_DBL_COLON]:
                self.state = 397
                self.walker_ref()
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LPAREN:
                    self.state = 398
                    self.spawn_ctx()

                self.state = 403
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.COLON, jacParser.LBRACE]:
                    self.state = 401
                    self.code_block()
                    pass
                elif token in [jacParser.SEMI]:
                    self.state = 402
                    self.match(jacParser.SEMI)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [jacParser.KW_WALKER]:
                self.state = 405
                self.match(jacParser.KW_WALKER)
                self.state = 406
                self.walker_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_namespaces

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespaces"):
                listener.enterNamespaces(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespaces"):
                listener.exitNamespaces(self)

    def namespaces(self):

        localctx = jacParser.NamespacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_namespaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(jacParser.COLON)
            self.state = 410
            self.name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_entry_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_entry_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_entry_block"):
                listener.enterWalk_entry_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_entry_block"):
                listener.exitWalk_entry_block(self)

    def walk_entry_block(self):

        localctx = jacParser.Walk_entry_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_walk_entry_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(jacParser.KW_WITH)
            self.state = 413
            self.match(jacParser.KW_ENTRY)
            self.state = 414
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_exit_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_exit_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_exit_block"):
                listener.enterWalk_exit_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_exit_block"):
                listener.exitWalk_exit_block(self)

    def walk_exit_block(self):

        localctx = jacParser.Walk_exit_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_walk_exit_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(jacParser.KW_WITH)
            self.state = 417
            self.match(jacParser.KW_EXIT)
            self.state = 418
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_activity_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_activity_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_activity_block"):
                listener.enterWalk_activity_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_activity_block"):
                listener.exitWalk_activity_block(self)

    def walk_activity_block(self):

        localctx = jacParser.Walk_activity_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_walk_activity_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(jacParser.KW_WITH)
            self.state = 421
            self.match(jacParser.KW_ACTIVITY)
            self.state = 422
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr_block"):
                listener.enterAttr_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr_block"):
                listener.exitAttr_block(self)

    def attr_block(self):

        localctx = jacParser.Attr_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_attr_block)
        self._la = 0  # Token type
        try:
            self.state = 435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.match(jacParser.LBRACE)
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.KW_HAS or _la == jacParser.KW_CAN:
                    self.state = 425
                    self.attr_stmt()
                    self.state = 430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 431
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.match(jacParser.COLON)
                self.state = 433
                self.attr_stmt()
                pass
            elif token in [jacParser.SEMI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 434
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def has_stmt(self):
            return self.getTypedRuleContext(jacParser.Has_stmtContext, 0)

        def can_stmt(self):
            return self.getTypedRuleContext(jacParser.Can_stmtContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr_stmt"):
                listener.enterAttr_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr_stmt"):
                listener.exitAttr_stmt(self)

    def attr_stmt(self):

        localctx = jacParser.Attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attr_stmt)
        try:
            self.state = 439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_HAS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 437
                self.has_stmt()
                pass
            elif token in [jacParser.KW_CAN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 438
                self.can_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def has_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Has_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Has_stmtContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_struct_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStruct_block"):
                listener.enterStruct_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStruct_block"):
                listener.exitStruct_block(self)

    def struct_block(self):

        localctx = jacParser.Struct_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_struct_block)
        self._la = 0  # Token type
        try:
            self.state = 452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 441
                self.match(jacParser.LBRACE)
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.KW_HAS:
                    self.state = 442
                    self.has_stmt()
                    self.state = 447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 448
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 449
                self.match(jacParser.COLON)
                self.state = 450
                self.has_stmt()
                pass
            elif token in [jacParser.SEMI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 451
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Can_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def can_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Can_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Can_stmtContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_can_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCan_block"):
                listener.enterCan_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCan_block"):
                listener.exitCan_block(self)

    def can_block(self):

        localctx = jacParser.Can_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_can_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_CAN:
                self.state = 454
                self.can_stmt()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext, 0)

        def can_block(self):
            return self.getTypedRuleContext(jacParser.Can_blockContext, 0)

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_block"):
                listener.enterGraph_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_block"):
                listener.exitGraph_block(self)

    def graph_block(self):

        localctx = jacParser.Graph_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_graph_block)
        try:
            self.state = 474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 460
                self.match(jacParser.LBRACE)
                self.state = 461
                self.has_root()
                self.state = 462
                self.can_block()
                self.state = 463
                self.match(jacParser.KW_SPAWN)
                self.state = 464
                self.code_block()
                self.state = 465
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.match(jacParser.COLON)
                self.state = 468
                self.has_root()
                self.state = 469
                self.can_block()
                self.state = 470
                self.match(jacParser.KW_SPAWN)
                self.state = 471
                self.code_block()
                self.state = 472
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_rootContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_root

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_root"):
                listener.enterHas_root(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_root"):
                listener.exitHas_root(self)

    def has_root(self):

        localctx = jacParser.Has_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_has_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(jacParser.KW_HAS)
            self.state = 477
            self.match(jacParser.KW_ANCHOR)
            self.state = 478
            self.match(jacParser.NAME)
            self.state = 479
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def has_assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Has_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Has_assignContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_has_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_stmt"):
                listener.enterHas_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_stmt"):
                listener.exitHas_stmt(self)

    def has_stmt(self):

        localctx = jacParser.Has_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_has_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(jacParser.KW_HAS)
            self.state = 482
            self.has_assign()
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 483
                self.match(jacParser.COMMA)
                self.state = 484
                self.has_assign()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 490
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def KW_PRIVATE(self):
            return self.getToken(jacParser.KW_PRIVATE, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_assign"):
                listener.enterHas_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_assign"):
                listener.exitHas_assign(self)

    def has_assign(self):

        localctx = jacParser.Has_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_has_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_PRIVATE:
                self.state = 492
                self.match(jacParser.KW_PRIVATE)

            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_ANCHOR:
                self.state = 495
                self.match(jacParser.KW_ANCHOR)

            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 46, self._ctx)
            if la_ == 1:
                self.state = 498
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.state = 499
                self.match(jacParser.NAME)
                self.state = 500
                self.match(jacParser.EQ)
                self.state = 501
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Can_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CAN(self):
            return self.getToken(jacParser.KW_CAN, 0)

        def dotted_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dotted_nameContext)
            else:
                return self.getTypedRuleContext(jacParser.Dotted_nameContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def preset_in_out(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Preset_in_outContext)
            else:
                return self.getTypedRuleContext(jacParser.Preset_in_outContext, i)

        def event_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Event_clauseContext)
            else:
                return self.getTypedRuleContext(jacParser.Event_clauseContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_can_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCan_stmt"):
                listener.enterCan_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCan_stmt"):
                listener.exitCan_stmt(self)

    def can_stmt(self):

        localctx = jacParser.Can_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_can_stmt)
        self._la = 0  # Token type
        try:
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 51, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.match(jacParser.KW_CAN)
                self.state = 505
                self.dotted_name()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.DBL_COLON:
                    self.state = 506
                    self.preset_in_out()
                    self.state = 507
                    self.event_clause()

                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 511
                    self.match(jacParser.COMMA)
                    self.state = 512
                    self.dotted_name()
                    self.state = 516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.DBL_COLON:
                        self.state = 513
                        self.preset_in_out()
                        self.state = 514
                        self.event_clause()

                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 523
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.match(jacParser.KW_CAN)
                self.state = 526
                self.match(jacParser.NAME)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_WITH:
                    self.state = 527
                    self.event_clause()

                self.state = 530
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_event_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEvent_clause"):
                listener.enterEvent_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEvent_clause"):
                listener.exitEvent_clause(self)

    def event_clause(self):

        localctx = jacParser.Event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_event_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(jacParser.KW_WITH)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 534
                self.name_list()

            self.state = 537
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_ENTRY)
                            | (1 << jacParser.KW_EXIT)
                            | (1 << jacParser.KW_ACTIVITY)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Preset_in_outContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.DBL_COLON)
            else:
                return self.getToken(jacParser.DBL_COLON, i)

        def COLON_OUT(self):
            return self.getToken(jacParser.COLON_OUT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def param_list(self):
            return self.getTypedRuleContext(jacParser.Param_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_preset_in_out

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPreset_in_out"):
                listener.enterPreset_in_out(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPreset_in_out"):
                listener.exitPreset_in_out(self)

    def preset_in_out(self):

        localctx = jacParser.Preset_in_outContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_preset_in_out)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(jacParser.DBL_COLON)
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
            if la_ == 1:
                self.state = 540
                self.param_list()

            self.state = 546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.DBL_COLON]:
                self.state = 543
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.COLON_OUT]:
                self.state = 544
                self.match(jacParser.COLON_OUT)
                self.state = 545
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dotted_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDotted_name"):
                listener.enterDotted_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDotted_name"):
                listener.exitDotted_name(self)

    def dotted_name(self):

        localctx = jacParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_dotted_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(jacParser.NAME)
            self.state = 549
            self.match(jacParser.DOT)
            self.state = 550
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_name_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName_list"):
                listener.enterName_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName_list"):
                listener.exitName_list(self)

    def name_list(self):

        localctx = jacParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_name_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(jacParser.NAME)
            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 553
                self.match(jacParser.COMMA)
                self.state = 554
                self.match(jacParser.NAME)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def kw_expr_list(self):
            return self.getTypedRuleContext(jacParser.Kw_expr_listContext, 0)

        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def getRuleIndex(self):
            return jacParser.RULE_param_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParam_list"):
                listener.enterParam_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParam_list"):
                listener.exitParam_list(self)

    def param_list(self):

        localctx = jacParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_param_list)
        try:
            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.expr_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.kw_expr_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 562
                self.expr_list()
                self.state = 563
                self.match(jacParser.COMMA)
                self.state = 564
                self.kw_expr_list()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ConnectContext)
            else:
                return self.getTypedRuleContext(jacParser.ConnectContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_expr_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr_list"):
                listener.enterExpr_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr_list"):
                listener.exitExpr_list(self)

    def expr_list(self):

        localctx = jacParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_expr_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.connect()
            self.state = 573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 569
                    self.match(jacParser.COMMA)
                    self.state = 570
                    self.connect()
                self.state = 575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Kw_expr_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def EQ(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def connect(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ConnectContext)
            else:
                return self.getTypedRuleContext(jacParser.ConnectContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_kw_expr_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKw_expr_list"):
                listener.enterKw_expr_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKw_expr_list"):
                listener.exitKw_expr_list(self)

    def kw_expr_list(self):

        localctx = jacParser.Kw_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_kw_expr_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(jacParser.NAME)
            self.state = 577
            self.match(jacParser.EQ)
            self.state = 578
            self.connect()
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 579
                self.match(jacParser.COMMA)
                self.state = 580
                self.match(jacParser.NAME)
                self.state = 581
                self.match(jacParser.EQ)
                self.state = 582
                self.connect()
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_code_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCode_block"):
                listener.enterCode_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCode_block"):
                listener.exitCode_block(self)

    def code_block(self):

        localctx = jacParser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_code_block)
        self._la = 0  # Token type
        try:
            self.state = 598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 588
                self.match(jacParser.LBRACE)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.T__1)
                            | (1 << jacParser.T__3)
                            | (1 << jacParser.T__4)
                            | (1 << jacParser.T__5)
                            | (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_IGNORE)
                            | (1 << jacParser.KW_TAKE)
                            | (1 << jacParser.KW_SPAWN)
                            | (1 << jacParser.COLON)
                            | (1 << jacParser.DBL_COLON)
                            | (1 << jacParser.NODE_DBL_COLON)
                            | (1 << jacParser.LBRACE)
                            | (1 << jacParser.KW_EDGE)
                            | (1 << jacParser.KW_SYNC)
                            | (1 << jacParser.KW_ASSERT)
                            | (1 << jacParser.KW_IF)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 65)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 65))
                        & (
                            (1 << (jacParser.KW_FOR - 65))
                            | (1 << (jacParser.KW_WHILE - 65))
                            | (1 << (jacParser.KW_CONTINUE - 65))
                            | (1 << (jacParser.KW_BREAK - 65))
                            | (1 << (jacParser.KW_DISENGAGE - 65))
                            | (1 << (jacParser.KW_YIELD - 65))
                            | (1 << (jacParser.KW_SKIP - 65))
                            | (1 << (jacParser.KW_REPORT - 65))
                            | (1 << (jacParser.KW_DESTROY - 65))
                            | (1 << (jacParser.KW_TRY - 65))
                            | (1 << (jacParser.KW_REF - 65))
                            | (1 << (jacParser.NOT - 65))
                            | (1 << (jacParser.KW_GLOBAL - 65))
                            | (1 << (jacParser.PLUS - 65))
                            | (1 << (jacParser.MINUS - 65))
                            | (1 << (jacParser.STAR_MUL - 65))
                            | (1 << (jacParser.LPAREN - 65))
                            | (1 << (jacParser.LSQUARE - 65))
                            | (1 << (jacParser.FLOAT - 65))
                            | (1 << (jacParser.STRING - 65))
                            | (1 << (jacParser.BOOL - 65))
                            | (1 << (jacParser.INT - 65))
                            | (1 << (jacParser.NULL - 65))
                            | (1 << (jacParser.NAME - 65))
                        )
                    )
                    != 0
                ):
                    self.state = 589
                    self.statement()
                    self.state = 594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 595
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self.match(jacParser.COLON)
                self.state = 597
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_ctx_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ctx_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_ctx_block"):
                listener.enterNode_ctx_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_ctx_block"):
                listener.exitNode_ctx_block(self)

    def node_ctx_block(self):

        localctx = jacParser.Node_ctx_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_node_ctx_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.name_list()
            self.state = 601
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def node_ctx_block(self):
            return self.getTypedRuleContext(jacParser.Node_ctx_blockContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def if_stmt(self):
            return self.getTypedRuleContext(jacParser.If_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(jacParser.Try_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(jacParser.For_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(jacParser.While_stmtContext, 0)

        def assert_stmt(self):
            return self.getTypedRuleContext(jacParser.Assert_stmtContext, 0)

        def ctrl_stmt(self):
            return self.getTypedRuleContext(jacParser.Ctrl_stmtContext, 0)

        def destroy_action(self):
            return self.getTypedRuleContext(jacParser.Destroy_actionContext, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def walker_action(self):
            return self.getTypedRuleContext(jacParser.Walker_actionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = jacParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_statement)
        try:
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 61, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 603
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.node_ctx_block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 605
                self.expression()
                self.state = 606
                self.match(jacParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 608
                self.if_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 609
                self.try_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 610
                self.for_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 611
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 612
                self.assert_stmt()
                self.state = 613
                self.match(jacParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 615
                self.ctrl_stmt()
                self.state = 616
                self.match(jacParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 618
                self.destroy_action()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 619
                self.report_action()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 620
                self.walker_action()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(jacParser.KW_IF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def elif_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Elif_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Elif_stmtContext, i)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_if_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_stmt"):
                listener.enterIf_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_stmt"):
                listener.exitIf_stmt(self)

    def if_stmt(self):

        localctx = jacParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(jacParser.KW_IF)
            self.state = 624
            self.expression()
            self.state = 625
            self.code_block()
            self.state = 629
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 626
                    self.elif_stmt()
                self.state = 631
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)

            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 63, self._ctx)
            if la_ == 1:
                self.state = 632
                self.else_stmt()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRY(self):
            return self.getToken(jacParser.KW_TRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def else_from_try(self):
            return self.getTypedRuleContext(jacParser.Else_from_tryContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_try_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTry_stmt"):
                listener.enterTry_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTry_stmt"):
                listener.exitTry_stmt(self)

    def try_stmt(self):

        localctx = jacParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_try_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.match(jacParser.KW_TRY)
            self.state = 636
            self.code_block()
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
            if la_ == 1:
                self.state = 637
                self.else_from_try()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_from_tryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_from_try

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_from_try"):
                listener.enterElse_from_try(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_from_try"):
                listener.exitElse_from_try(self)

    def else_from_try(self):

        localctx = jacParser.Else_from_tryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_else_from_try)
        self._la = 0  # Token type
        try:
            self.state = 653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                self.match(jacParser.KW_ELSE)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LPAREN:
                    self.state = 641
                    self.match(jacParser.LPAREN)
                    self.state = 642
                    self.match(jacParser.NAME)
                    self.state = 643
                    self.match(jacParser.RPAREN)

                self.state = 646
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.match(jacParser.KW_ELSE)
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_WITH:
                    self.state = 648
                    self.match(jacParser.KW_WITH)
                    self.state = 649
                    self.match(jacParser.NAME)

                self.state = 652
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elif_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELIF(self):
            return self.getToken(jacParser.KW_ELIF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_elif_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElif_stmt"):
                listener.enterElif_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElif_stmt"):
                listener.exitElif_stmt(self)

    def elif_stmt(self):

        localctx = jacParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(jacParser.KW_ELIF)
            self.state = 656
            self.expression()
            self.state = 657
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_stmt"):
                listener.enterElse_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_stmt"):
                listener.exitElse_stmt(self)

    def else_stmt(self):

        localctx = jacParser.Else_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_else_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(jacParser.KW_ELSE)
            self.state = 660
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(jacParser.KW_FOR, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def KW_TO(self):
            return self.getToken(jacParser.KW_TO, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def getRuleIndex(self):
            return jacParser.RULE_for_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_stmt"):
                listener.enterFor_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_stmt"):
                listener.exitFor_stmt(self)

    def for_stmt(self):

        localctx = jacParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_for_stmt)
        self._la = 0  # Token type
        try:
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 69, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.match(jacParser.KW_FOR)
                self.state = 663
                self.expression()
                self.state = 664
                self.match(jacParser.KW_TO)
                self.state = 665
                self.expression()
                self.state = 666
                self.match(jacParser.KW_BY)
                self.state = 667
                self.expression()
                self.state = 668
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self.match(jacParser.KW_FOR)
                self.state = 671
                self.match(jacParser.NAME)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 672
                    self.match(jacParser.COMMA)
                    self.state = 673
                    self.match(jacParser.NAME)

                self.state = 676
                self.match(jacParser.KW_IN)
                self.state = 677
                self.expression()
                self.state = 678
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHILE(self):
            return self.getToken(jacParser.KW_WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_while_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhile_stmt"):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhile_stmt"):
                listener.exitWhile_stmt(self)

    def while_stmt(self):

        localctx = jacParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(jacParser.KW_WHILE)
            self.state = 683
            self.expression()
            self.state = 684
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ctrl_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTINUE(self):
            return self.getToken(jacParser.KW_CONTINUE, 0)

        def KW_BREAK(self):
            return self.getToken(jacParser.KW_BREAK, 0)

        def KW_SKIP(self):
            return self.getToken(jacParser.KW_SKIP, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ctrl_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCtrl_stmt"):
                listener.enterCtrl_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCtrl_stmt"):
                listener.exitCtrl_stmt(self)

    def ctrl_stmt(self):

        localctx = jacParser.Ctrl_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ctrl_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 69)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 69))
                        & (
                            (1 << (jacParser.KW_CONTINUE - 69))
                            | (1 << (jacParser.KW_BREAK - 69))
                            | (1 << (jacParser.KW_SKIP - 69))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASSERT(self):
            return self.getToken(jacParser.KW_ASSERT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_assert_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssert_stmt"):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssert_stmt"):
                listener.exitAssert_stmt(self)

    def assert_stmt(self):

        localctx = jacParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_assert_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(jacParser.KW_ASSERT)
            self.state = 689
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destroy_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DESTROY(self):
            return self.getToken(jacParser.KW_DESTROY, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_destroy_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDestroy_action"):
                listener.enterDestroy_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDestroy_action"):
                listener.exitDestroy_action(self)

    def destroy_action(self):

        localctx = jacParser.Destroy_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_destroy_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(jacParser.KW_DESTROY)
            self.state = 692
            self.expression()
            self.state = 693
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Report_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPORT(self):
            return self.getToken(jacParser.KW_REPORT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_report_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReport_action"):
                listener.enterReport_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReport_action"):
                listener.exitReport_action(self)

    def report_action(self):

        localctx = jacParser.Report_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_report_action)
        try:
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 70, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.match(jacParser.KW_REPORT)
                self.state = 696
                self.expression()
                self.state = 697
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 699
                self.match(jacParser.KW_REPORT)
                self.state = 700
                self.match(jacParser.COLON)
                self.state = 701
                self.match(jacParser.NAME)
                self.state = 702
                self.match(jacParser.EQ)
                self.state = 703
                self.expression()
                self.state = 704
                self.match(jacParser.SEMI)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ignore_action(self):
            return self.getTypedRuleContext(jacParser.Ignore_actionContext, 0)

        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext, 0)

        def disengage_action(self):
            return self.getTypedRuleContext(jacParser.Disengage_actionContext, 0)

        def yield_action(self):
            return self.getTypedRuleContext(jacParser.Yield_actionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_action"):
                listener.enterWalker_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_action"):
                listener.exitWalker_action(self)

    def walker_action(self):

        localctx = jacParser.Walker_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_walker_action)
        try:
            self.state = 712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_IGNORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 708
                self.ignore_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 709
                self.take_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 710
                self.disengage_action()
                pass
            elif token in [jacParser.KW_YIELD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 711
                self.yield_action()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ignore_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IGNORE(self):
            return self.getToken(jacParser.KW_IGNORE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ignore_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIgnore_action"):
                listener.enterIgnore_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIgnore_action"):
                listener.exitIgnore_action(self)

    def ignore_action(self):

        localctx = jacParser.Ignore_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_ignore_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(jacParser.KW_IGNORE)
            self.state = 715
            self.expression()
            self.state = 716
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Take_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TAKE(self):
            return self.getToken(jacParser.KW_TAKE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_take_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTake_action"):
                listener.enterTake_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTake_action"):
                listener.exitTake_action(self)

    def take_action(self):

        localctx = jacParser.Take_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_take_action)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(jacParser.KW_TAKE)
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.COLON:
                self.state = 719
                self.match(jacParser.COLON)
                self.state = 720
                self.match(jacParser.NAME)

            self.state = 723
            self.expression()
            self.state = 726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.SEMI]:
                self.state = 724
                self.match(jacParser.SEMI)
                pass
            elif token in [jacParser.KW_ELSE]:
                self.state = 725
                self.else_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Disengage_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISENGAGE(self):
            return self.getToken(jacParser.KW_DISENGAGE, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_disengage_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDisengage_action"):
                listener.enterDisengage_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDisengage_action"):
                listener.exitDisengage_action(self)

    def disengage_action(self):

        localctx = jacParser.Disengage_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_disengage_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(jacParser.KW_DISENGAGE)
            self.state = 731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_REPORT]:
                self.state = 729
                self.report_action()
                pass
            elif token in [jacParser.SEMI]:
                self.state = 730
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YIELD(self):
            return self.getToken(jacParser.KW_YIELD, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def disengage_action(self):
            return self.getTypedRuleContext(jacParser.Disengage_actionContext, 0)

        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_yield_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYield_action"):
                listener.enterYield_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYield_action"):
                listener.exitYield_action(self)

    def yield_action(self):

        localctx = jacParser.Yield_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_yield_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(jacParser.KW_YIELD)
            self.state = 738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_REPORT]:
                self.state = 734
                self.report_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.state = 735
                self.disengage_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.state = 736
                self.take_action()
                pass
            elif token in [jacParser.SEMI]:
                self.state = 737
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect(self):
            return self.getTypedRuleContext(jacParser.ConnectContext, 0)

        def assignment(self):
            return self.getTypedRuleContext(jacParser.AssignmentContext, 0)

        def copy_assign(self):
            return self.getTypedRuleContext(jacParser.Copy_assignContext, 0)

        def inc_assign(self):
            return self.getTypedRuleContext(jacParser.Inc_assignContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self):

        localctx = jacParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.connect()
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
            if la_ == 1:
                self.state = 741
                self.assignment()

            elif la_ == 2:
                self.state = 742
                self.copy_assign()

            elif la_ == 3:
                self.state = 743
                self.inc_assign()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_assignment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignment"):
                listener.enterAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignment"):
                listener.exitAssignment(self)

    def assignment(self):

        localctx = jacParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(jacParser.EQ)
            self.state = 747
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CPY_EQ(self):
            return self.getToken(jacParser.CPY_EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_copy_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCopy_assign"):
                listener.enterCopy_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCopy_assign"):
                listener.exitCopy_assign(self)

    def copy_assign(self):

        localctx = jacParser.Copy_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_copy_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(jacParser.CPY_EQ)
            self.state = 750
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inc_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def PEQ(self):
            return self.getToken(jacParser.PEQ, 0)

        def MEQ(self):
            return self.getToken(jacParser.MEQ, 0)

        def TEQ(self):
            return self.getToken(jacParser.TEQ, 0)

        def DEQ(self):
            return self.getToken(jacParser.DEQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_inc_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInc_assign"):
                listener.enterInc_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInc_assign"):
                listener.exitInc_assign(self)

    def inc_assign(self):

        localctx = jacParser.Inc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_inc_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.PEQ)
                            | (1 << jacParser.MEQ)
                            | (1 << jacParser.TEQ)
                            | (1 << jacParser.DEQ)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 753
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConnectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical(self):
            return self.getTypedRuleContext(jacParser.LogicalContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def connect_op(self):
            return self.getTypedRuleContext(jacParser.Connect_opContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect"):
                listener.enterConnect(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect"):
                listener.exitConnect(self)

    def connect(self):

        localctx = jacParser.ConnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_connect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.logical()
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 78, self._ctx)
            if la_ == 1:
                self.state = 759
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.NOT]:
                    self.state = 756
                    self.match(jacParser.NOT)
                    self.state = 757
                    self.edge_ref()
                    pass
                elif token in [
                    jacParser.T__6,
                    jacParser.T__8,
                    jacParser.T__9,
                    jacParser.T__10,
                    jacParser.PLUS,
                ]:
                    self.state = 758
                    self.connect_op()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 761
                self.expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.CompareContext)
            else:
                return self.getTypedRuleContext(jacParser.CompareContext, i)

        def KW_AND(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.KW_AND)
            else:
                return self.getToken(jacParser.KW_AND, i)

        def KW_OR(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.KW_OR)
            else:
                return self.getToken(jacParser.KW_OR, i)

        def getRuleIndex(self):
            return jacParser.RULE_logical

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogical"):
                listener.enterLogical(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogical"):
                listener.exitLogical(self)

    def logical(self):

        localctx = jacParser.LogicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_logical)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.compare()
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_AND or _la == jacParser.KW_OR:
                self.state = 766
                _la = self._input.LA(1)
                if not (_la == jacParser.KW_AND or _la == jacParser.KW_OR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 767
                self.compare()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def compare(self):
            return self.getTypedRuleContext(jacParser.CompareContext, 0)

        def arithmetic(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(jacParser.ArithmeticContext, i)

        def cmp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Cmp_opContext)
            else:
                return self.getTypedRuleContext(jacParser.Cmp_opContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_compare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompare"):
                listener.enterCompare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompare"):
                listener.exitCompare(self)

    def compare(self):

        localctx = jacParser.CompareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_compare)
        try:
            self.state = 784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 773
                self.match(jacParser.NOT)
                self.state = 774
                self.compare()
                pass
            elif token in [
                jacParser.T__1,
                jacParser.T__3,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.TYP_STRING,
                jacParser.TYP_INT,
                jacParser.TYP_FLOAT,
                jacParser.TYP_LIST,
                jacParser.TYP_DICT,
                jacParser.TYP_BOOL,
                jacParser.KW_TYPE,
                jacParser.KW_NODE,
                jacParser.KW_SPAWN,
                jacParser.DBL_COLON,
                jacParser.NODE_DBL_COLON,
                jacParser.LBRACE,
                jacParser.KW_EDGE,
                jacParser.KW_SYNC,
                jacParser.KW_REF,
                jacParser.KW_GLOBAL,
                jacParser.PLUS,
                jacParser.MINUS,
                jacParser.STAR_MUL,
                jacParser.LPAREN,
                jacParser.LSQUARE,
                jacParser.FLOAT,
                jacParser.STRING,
                jacParser.BOOL,
                jacParser.INT,
                jacParser.NULL,
                jacParser.NAME,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 775
                self.arithmetic()
                self.state = 781
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 776
                        self.cmp_op()
                        self.state = 777
                        self.arithmetic()
                    self.state = 783
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmp_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EE(self):
            return self.getToken(jacParser.EE, 0)

        def LT(self):
            return self.getToken(jacParser.LT, 0)

        def GT(self):
            return self.getToken(jacParser.GT, 0)

        def LTE(self):
            return self.getToken(jacParser.LTE, 0)

        def GTE(self):
            return self.getToken(jacParser.GTE, 0)

        def NE(self):
            return self.getToken(jacParser.NE, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def nin(self):
            return self.getTypedRuleContext(jacParser.NinContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_cmp_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCmp_op"):
                listener.enterCmp_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCmp_op"):
                listener.exitCmp_op(self)

    def cmp_op(self):

        localctx = jacParser.Cmp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_cmp_op)
        try:
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.EE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.match(jacParser.EE)
                pass
            elif token in [jacParser.LT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.match(jacParser.LT)
                pass
            elif token in [jacParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 788
                self.match(jacParser.GT)
                pass
            elif token in [jacParser.LTE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 789
                self.match(jacParser.LTE)
                pass
            elif token in [jacParser.GTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 790
                self.match(jacParser.GTE)
                pass
            elif token in [jacParser.NE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 791
                self.match(jacParser.NE)
                pass
            elif token in [jacParser.KW_IN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 792
                self.match(jacParser.KW_IN)
                pass
            elif token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 793
                self.nin()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NinContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_nin

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNin"):
                listener.enterNin(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNin"):
                listener.exitNin(self)

    def nin(self):

        localctx = jacParser.NinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_nin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(jacParser.NOT)
            self.state = 797
            self.match(jacParser.KW_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArithmeticContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.TermContext)
            else:
                return self.getTypedRuleContext(jacParser.TermContext, i)

        def PLUS(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.PLUS)
            else:
                return self.getToken(jacParser.PLUS, i)

        def MINUS(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.MINUS)
            else:
                return self.getToken(jacParser.MINUS, i)

        def getRuleIndex(self):
            return jacParser.RULE_arithmetic

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmetic"):
                listener.enterArithmetic(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmetic"):
                listener.exitArithmetic(self)

    def arithmetic(self):

        localctx = jacParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_arithmetic)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.term()
            self.state = 804
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 83, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 800
                    _la = self._input.LA(1)
                    if not (_la == jacParser.PLUS or _la == jacParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 801
                    self.term()
                self.state = 806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 83, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext, i)

        def STAR_MUL(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.STAR_MUL)
            else:
                return self.getToken(jacParser.STAR_MUL, i)

        def DIV(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.DIV)
            else:
                return self.getToken(jacParser.DIV, i)

        def MOD(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.MOD)
            else:
                return self.getToken(jacParser.MOD, i)

        def getRuleIndex(self):
            return jacParser.RULE_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTerm"):
                listener.enterTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTerm"):
                listener.exitTerm(self)

    def term(self):

        localctx = jacParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.factor()
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 95)) & ~0x3F) == 0 and (
                (1 << (_la - 95))
                & (
                    (1 << (jacParser.STAR_MUL - 95))
                    | (1 << (jacParser.DIV - 95))
                    | (1 << (jacParser.MOD - 95))
                )
            ) != 0:
                self.state = 808
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 95)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 95))
                            & (
                                (1 << (jacParser.STAR_MUL - 95))
                                | (1 << (jacParser.DIV - 95))
                                | (1 << (jacParser.MOD - 95))
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 809
                self.factor()
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(jacParser.FactorContext, 0)

        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def power(self):
            return self.getTypedRuleContext(jacParser.PowerContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_factor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactor"):
                listener.enterFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactor"):
                listener.exitFactor(self)

    def factor(self):

        localctx = jacParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 85, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                _la = self._input.LA(1)
                if not (_la == jacParser.PLUS or _la == jacParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 816
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.power()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def POW(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.POW)
            else:
                return self.getToken(jacParser.POW, i)

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_power

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPower"):
                listener.enterPower(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPower"):
                listener.exitPower(self)

    def power(self):

        localctx = jacParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.atom(0)
            self.state = 825
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 821
                    self.match(jacParser.POW)
                    self.state = 822
                    self.factor()
                self.state = 827
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_global_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_ref"):
                listener.enterGlobal_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_ref"):
                listener.exitGlobal_ref(self)

    def global_ref(self):

        localctx = jacParser.Global_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_global_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(jacParser.KW_GLOBAL)
            self.state = 829
            self.match(jacParser.DOT)
            self.state = 832
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_CONTEXT, jacParser.KW_INFO, jacParser.KW_DETAILS]:
                self.state = 830
                self.obj_built_in()
                pass
            elif token in [jacParser.NAME]:
                self.state = 831
                self.match(jacParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def multistring(self):
            return self.getTypedRuleContext(jacParser.MultistringContext, 0)

        def BOOL(self):
            return self.getToken(jacParser.BOOL, 0)

        def NULL(self):
            return self.getToken(jacParser.NULL, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def global_ref(self):
            return self.getTypedRuleContext(jacParser.Global_refContext, 0)

        def node_edge_ref(self):
            return self.getTypedRuleContext(jacParser.Node_edge_refContext, 0)

        def list_val(self):
            return self.getTypedRuleContext(jacParser.List_valContext, 0)

        def dict_val(self):
            return self.getTypedRuleContext(jacParser.Dict_valContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def ability_op(self):
            return self.getTypedRuleContext(jacParser.Ability_opContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def KW_SYNC(self):
            return self.getToken(jacParser.KW_SYNC, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def spawn(self):
            return self.getTypedRuleContext(jacParser.SpawnContext, 0)

        def ref(self):
            return self.getTypedRuleContext(jacParser.RefContext, 0)

        def deref(self):
            return self.getTypedRuleContext(jacParser.DerefContext, 0)

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext, 0)

        def atom_trailer(self):
            return self.getTypedRuleContext(jacParser.Atom_trailerContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom"):
                listener.enterAtom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom"):
                listener.exitAtom(self)

    def atom(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = jacParser.AtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_atom, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.INT]:
                self.state = 835
                self.match(jacParser.INT)
                pass
            elif token in [jacParser.FLOAT]:
                self.state = 836
                self.match(jacParser.FLOAT)
                pass
            elif token in [jacParser.STRING]:
                self.state = 837
                self.multistring()
                pass
            elif token in [jacParser.BOOL]:
                self.state = 838
                self.match(jacParser.BOOL)
                pass
            elif token in [jacParser.NULL]:
                self.state = 839
                self.match(jacParser.NULL)
                pass
            elif token in [jacParser.NAME]:
                self.state = 840
                self.match(jacParser.NAME)
                pass
            elif token in [jacParser.KW_GLOBAL]:
                self.state = 841
                self.global_ref()
                pass
            elif token in [
                jacParser.T__1,
                jacParser.T__3,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.NODE_DBL_COLON,
                jacParser.MINUS,
            ]:
                self.state = 842
                self.node_edge_ref()
                pass
            elif token in [jacParser.LSQUARE]:
                self.state = 843
                self.list_val()
                pass
            elif token in [jacParser.LBRACE]:
                self.state = 844
                self.dict_val()
                pass
            elif token in [jacParser.LPAREN]:
                self.state = 845
                self.match(jacParser.LPAREN)
                self.state = 846
                self.expression()
                self.state = 847
                self.match(jacParser.RPAREN)
                pass
            elif token in [jacParser.DBL_COLON]:
                self.state = 849
                self.ability_op()
                self.state = 850
                self.match(jacParser.NAME)
                self.state = 852
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
                if la_ == 1:
                    self.state = 851
                    self.spawn_ctx()

                pass
            elif token in [jacParser.KW_SYNC]:
                self.state = 854
                self.match(jacParser.KW_SYNC)
                self.state = 855
                self.atom(5)
                pass
            elif token in [jacParser.KW_SPAWN]:
                self.state = 856
                self.spawn()
                pass
            elif token in [jacParser.KW_REF]:
                self.state = 857
                self.ref()
                pass
            elif token in [jacParser.STAR_MUL]:
                self.state = 858
                self.deref()
                pass
            elif token in [
                jacParser.TYP_STRING,
                jacParser.TYP_INT,
                jacParser.TYP_FLOAT,
                jacParser.TYP_LIST,
                jacParser.TYP_DICT,
                jacParser.TYP_BOOL,
                jacParser.KW_TYPE,
                jacParser.KW_NODE,
                jacParser.KW_EDGE,
            ]:
                self.state = 859
                self.any_type()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 866
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                    self.state = 862
                    if not self.precpred(self._ctx, 6):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 6)"
                        )
                    self.state = 863
                    self.atom_trailer()
                self.state = 868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Atom_trailerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def built_in(self):
            return self.getTypedRuleContext(jacParser.Built_inContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def index_slice(self):
            return self.getTypedRuleContext(jacParser.Index_sliceContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def param_list(self):
            return self.getTypedRuleContext(jacParser.Param_listContext, 0)

        def ability_op(self):
            return self.getTypedRuleContext(jacParser.Ability_opContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_atom_trailer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom_trailer"):
                listener.enterAtom_trailer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom_trailer"):
                listener.exitAtom_trailer(self)

    def atom_trailer(self):

        localctx = jacParser.Atom_trailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_atom_trailer)
        self._la = 0  # Token type
        try:
            self.state = 884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                self.match(jacParser.DOT)
                self.state = 870
                self.built_in()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 871
                self.match(jacParser.DOT)
                self.state = 872
                self.match(jacParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 873
                self.index_slice()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 874
                self.match(jacParser.LPAREN)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.T__1)
                            | (1 << jacParser.T__3)
                            | (1 << jacParser.T__4)
                            | (1 << jacParser.T__5)
                            | (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_SPAWN)
                            | (1 << jacParser.DBL_COLON)
                            | (1 << jacParser.NODE_DBL_COLON)
                            | (1 << jacParser.LBRACE)
                            | (1 << jacParser.KW_EDGE)
                            | (1 << jacParser.KW_SYNC)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 77)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 77))
                        & (
                            (1 << (jacParser.KW_REF - 77))
                            | (1 << (jacParser.NOT - 77))
                            | (1 << (jacParser.KW_GLOBAL - 77))
                            | (1 << (jacParser.PLUS - 77))
                            | (1 << (jacParser.MINUS - 77))
                            | (1 << (jacParser.STAR_MUL - 77))
                            | (1 << (jacParser.LPAREN - 77))
                            | (1 << (jacParser.LSQUARE - 77))
                            | (1 << (jacParser.FLOAT - 77))
                            | (1 << (jacParser.STRING - 77))
                            | (1 << (jacParser.BOOL - 77))
                            | (1 << (jacParser.INT - 77))
                            | (1 << (jacParser.NULL - 77))
                            | (1 << (jacParser.NAME - 77))
                        )
                    )
                    != 0
                ):
                    self.state = 875
                    self.param_list()

                self.state = 878
                self.match(jacParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 879
                self.ability_op()
                self.state = 880
                self.match(jacParser.NAME)
                self.state = 882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
                if la_ == 1:
                    self.state = 881
                    self.spawn_ctx()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ability_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ability_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbility_op"):
                listener.enterAbility_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbility_op"):
                listener.exitAbility_op(self)

    def ability_op(self):

        localctx = jacParser.Ability_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ability_op)
        try:
            self.state = 890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 94, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 886
                self.match(jacParser.DBL_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.match(jacParser.DBL_COLON)
                self.state = 888
                self.match(jacParser.NAME)
                self.state = 889
                self.match(jacParser.COLON)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REF(self):
            return self.getToken(jacParser.KW_REF, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRef"):
                listener.enterRef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRef"):
                listener.exitRef(self)

    def ref(self):

        localctx = jacParser.RefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(jacParser.KW_REF)
            self.state = 893
            self.atom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DerefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_deref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeref"):
                listener.enterDeref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeref"):
                listener.exitDeref(self)

    def deref(self):

        localctx = jacParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_deref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(jacParser.STAR_MUL)
            self.state = 896
            self.atom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_built_in(self):
            return self.getTypedRuleContext(jacParser.String_built_inContext, 0)

        def dict_built_in(self):
            return self.getTypedRuleContext(jacParser.Dict_built_inContext, 0)

        def list_built_in(self):
            return self.getTypedRuleContext(jacParser.List_built_inContext, 0)

        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext, 0)

        def cast_built_in(self):
            return self.getTypedRuleContext(jacParser.Cast_built_inContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBuilt_in"):
                listener.enterBuilt_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBuilt_in"):
                listener.exitBuilt_in(self)

    def built_in(self):

        localctx = jacParser.Built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_built_in)
        try:
            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 95, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self.string_built_in()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 900
                self.dict_built_in()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 901
                self.list_built_in()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 902
                self.obj_built_in()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 903
                self.cast_built_in()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_cast_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCast_built_in"):
                listener.enterCast_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCast_built_in"):
                listener.exitCast_built_in(self)

    def cast_built_in(self):

        localctx = jacParser.Cast_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_cast_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Obj_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTEXT(self):
            return self.getToken(jacParser.KW_CONTEXT, 0)

        def KW_INFO(self):
            return self.getToken(jacParser.KW_INFO, 0)

        def KW_DETAILS(self):
            return self.getToken(jacParser.KW_DETAILS, 0)

        def getRuleIndex(self):
            return jacParser.RULE_obj_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObj_built_in"):
                listener.enterObj_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObj_built_in"):
                listener.exitObj_built_in(self)

    def obj_built_in(self):

        localctx = jacParser.Obj_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_obj_built_in)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_CONTEXT)
                            | (1 << jacParser.KW_INFO)
                            | (1 << jacParser.KW_DETAILS)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KEYS(self):
            return self.getToken(jacParser.KW_KEYS, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def DICT_DBL_COLON(self):
            return self.getToken(jacParser.DICT_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dict_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDict_built_in"):
                listener.enterDict_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDict_built_in"):
                listener.exitDict_built_in(self)

    def dict_built_in(self):

        localctx = jacParser.Dict_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dict_built_in)
        self._la = 0  # Token type
        try:
            self.state = 927
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_KEYS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 910
                self.match(jacParser.KW_KEYS)
                pass
            elif token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.match(jacParser.LBRACE)
                self.state = 912
                self.name_list()
                self.state = 913
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.TYP_DICT, jacParser.DICT_DBL_COLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 918
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_DICT]:
                    self.state = 915
                    self.match(jacParser.TYP_DICT)
                    self.state = 916
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.DICT_DBL_COLON]:
                    self.state = 917
                    self.match(jacParser.DICT_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 920
                _la = self._input.LA(1)
                if not (_la == jacParser.KW_KEYS or _la == jacParser.NAME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 97, self._ctx)
                if la_ == 1:
                    self.state = 921
                    self.match(jacParser.LPAREN)
                    self.state = 922
                    self.expr_list()
                    self.state = 923
                    self.match(jacParser.RPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LENGTH(self):
            return self.getToken(jacParser.KW_LENGTH, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def LIST_DBL_COLON(self):
            return self.getToken(jacParser.LIST_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterList_built_in"):
                listener.enterList_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitList_built_in"):
                listener.exitList_built_in(self)

    def list_built_in(self):

        localctx = jacParser.List_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_list_built_in)
        try:
            self.state = 942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_LENGTH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 929
                self.match(jacParser.KW_LENGTH)
                pass
            elif token in [jacParser.TYP_LIST, jacParser.LIST_DBL_COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 933
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_LIST]:
                    self.state = 930
                    self.match(jacParser.TYP_LIST)
                    self.state = 931
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.LIST_DBL_COLON]:
                    self.state = 932
                    self.match(jacParser.LIST_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 935
                self.match(jacParser.NAME)
                self.state = 940
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 100, self._ctx)
                if la_ == 1:
                    self.state = 936
                    self.match(jacParser.LPAREN)
                    self.state = 937
                    self.expr_list()
                    self.state = 938
                    self.match(jacParser.RPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def STR_DBL_COLON(self):
            return self.getToken(jacParser.STR_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_string_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_built_in"):
                listener.enterString_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_built_in"):
                listener.exitString_built_in(self)

    def string_built_in(self):

        localctx = jacParser.String_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_string_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.TYP_STRING]:
                self.state = 944
                self.match(jacParser.TYP_STRING)
                self.state = 945
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.STR_DBL_COLON]:
                self.state = 946
                self.match(jacParser.STR_DBL_COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 949
            self.match(jacParser.NAME)
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
            if la_ == 1:
                self.state = 950
                self.match(jacParser.LPAREN)
                self.state = 951
                self.expr_list()
                self.state = 952
                self.match(jacParser.RPAREN)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_edge_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def node_edge_ref(self):
            return self.getTypedRuleContext(jacParser.Node_edge_refContext, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_edge_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_edge_ref"):
                listener.enterNode_edge_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_edge_ref"):
                listener.exitNode_edge_ref(self)

    def node_edge_ref(self):

        localctx = jacParser.Node_edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_node_edge_ref)
        try:
            self.state = 967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NODE_DBL_COLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 956
                self.node_ref()
                self.state = 958
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
                if la_ == 1:
                    self.state = 957
                    self.filter_ctx()

                self.state = 961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
                if la_ == 1:
                    self.state = 960
                    self.node_edge_ref()

                pass
            elif token in [
                jacParser.T__1,
                jacParser.T__3,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.MINUS,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.edge_ref()
                self.state = 965
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 106, self._ctx)
                if la_ == 1:
                    self.state = 964
                    self.node_edge_ref()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODE_DBL_COLON(self):
            return self.getToken(jacParser.NODE_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_ref"):
                listener.enterNode_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_ref"):
                listener.exitNode_ref(self)

    def node_ref(self):

        localctx = jacParser.Node_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_node_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(jacParser.NODE_DBL_COLON)
            self.state = 970
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WALKER_DBL_COLON(self):
            return self.getToken(jacParser.WALKER_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_ref"):
                listener.enterWalker_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_ref"):
                listener.exitWalker_ref(self)

    def walker_ref(self):

        localctx = jacParser.Walker_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_walker_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(jacParser.WALKER_DBL_COLON)
            self.state = 973
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH_DBL_COLON(self):
            return self.getToken(jacParser.GRAPH_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_ref"):
                listener.enterGraph_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_ref"):
                listener.exitGraph_ref(self)

    def graph_ref(self):

        localctx = jacParser.Graph_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_graph_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(jacParser.GRAPH_DBL_COLON)
            self.state = 976
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_DBL_COLON(self):
            return self.getToken(jacParser.TYPE_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_type_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_ref"):
                listener.enterType_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_ref"):
                listener.exitType_ref(self)

    def type_ref(self):

        localctx = jacParser.Type_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_type_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(jacParser.TYPE_DBL_COLON)
            self.state = 979
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edge_to(self):
            return self.getTypedRuleContext(jacParser.Edge_toContext, 0)

        def edge_from(self):
            return self.getTypedRuleContext(jacParser.Edge_fromContext, 0)

        def edge_any(self):
            return self.getTypedRuleContext(jacParser.Edge_anyContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_ref"):
                listener.enterEdge_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_ref"):
                listener.exitEdge_ref(self)

    def edge_ref(self):

        localctx = jacParser.Edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_edge_ref)
        try:
            self.state = 984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                self.edge_to()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.edge_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 983
                self.edge_any()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_toContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_to

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_to"):
                listener.enterEdge_to(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_to"):
                listener.exitEdge_to(self)

    def edge_to(self):

        localctx = jacParser.Edge_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_edge_to)
        self._la = 0  # Token type
        try:
            self.state = 997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.match(jacParser.T__1)
                pass
            elif token in [jacParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 987
                self.match(jacParser.MINUS)
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 988
                    self.match(jacParser.LSQUARE)
                    self.state = 989
                    self.match(jacParser.NAME)
                    self.state = 991
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 990
                        self.filter_ctx()

                    self.state = 993
                    self.match(jacParser.RSQUARE)

                self.state = 996
                self.match(jacParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_fromContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_from

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_from"):
                listener.enterEdge_from(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_from"):
                listener.exitEdge_from(self)

    def edge_from(self):

        localctx = jacParser.Edge_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_edge_from)
        self._la = 0  # Token type
        try:
            self.state = 1010
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.match(jacParser.T__3)
                pass
            elif token in [jacParser.T__4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1000
                self.match(jacParser.T__4)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 1001
                    self.match(jacParser.LSQUARE)
                    self.state = 1002
                    self.match(jacParser.NAME)
                    self.state = 1004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 1003
                        self.filter_ctx()

                    self.state = 1006
                    self.match(jacParser.RSQUARE)

                self.state = 1009
                self.match(jacParser.MINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_anyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_any

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_any"):
                listener.enterEdge_any(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_any"):
                listener.exitEdge_any(self)

    def edge_any(self):

        localctx = jacParser.Edge_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_edge_any)
        self._la = 0  # Token type
        try:
            self.state = 1023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1012
                self.match(jacParser.T__5)
                pass
            elif token in [jacParser.T__4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1013
                self.match(jacParser.T__4)
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 1014
                    self.match(jacParser.LSQUARE)
                    self.state = 1015
                    self.match(jacParser.NAME)
                    self.state = 1017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 1016
                        self.filter_ctx()

                    self.state = 1019
                    self.match(jacParser.RSQUARE)

                self.state = 1022
                self.match(jacParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connect_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect_to(self):
            return self.getTypedRuleContext(jacParser.Connect_toContext, 0)

        def connect_from(self):
            return self.getTypedRuleContext(jacParser.Connect_fromContext, 0)

        def connect_any(self):
            return self.getTypedRuleContext(jacParser.Connect_anyContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect_op"):
                listener.enterConnect_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect_op"):
                listener.exitConnect_op(self)

    def connect_op(self):

        localctx = jacParser.Connect_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_connect_op)
        try:
            self.state = 1028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1025
                self.connect_to()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1026
                self.connect_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1027
                self.connect_any()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connect_toContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect_to

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect_to"):
                listener.enterConnect_to(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect_to"):
                listener.exitConnect_to(self)

    def connect_to(self):

        localctx = jacParser.Connect_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_connect_to)
        self._la = 0  # Token type
        try:
            self.state = 1041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1030
                self.match(jacParser.T__6)
                pass
            elif token in [jacParser.PLUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1031
                self.match(jacParser.PLUS)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 1032
                    self.match(jacParser.LSQUARE)
                    self.state = 1033
                    self.match(jacParser.NAME)
                    self.state = 1035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 1034
                        self.spawn_ctx()

                    self.state = 1037
                    self.match(jacParser.RSQUARE)

                self.state = 1040
                self.match(jacParser.T__7)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connect_fromContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect_from

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect_from"):
                listener.enterConnect_from(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect_from"):
                listener.exitConnect_from(self)

    def connect_from(self):

        localctx = jacParser.Connect_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_connect_from)
        self._la = 0  # Token type
        try:
            self.state = 1054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1043
                self.match(jacParser.T__8)
                pass
            elif token in [jacParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.match(jacParser.T__9)
                self.state = 1051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 1045
                    self.match(jacParser.LSQUARE)
                    self.state = 1046
                    self.match(jacParser.NAME)
                    self.state = 1048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 1047
                        self.spawn_ctx()

                    self.state = 1050
                    self.match(jacParser.RSQUARE)

                self.state = 1053
                self.match(jacParser.PLUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connect_anyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect_any

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect_any"):
                listener.enterConnect_any(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect_any"):
                listener.exitConnect_any(self)

    def connect_any(self):

        localctx = jacParser.Connect_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_connect_any)
        self._la = 0  # Token type
        try:
            self.state = 1067
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1056
                self.match(jacParser.T__10)
                pass
            elif token in [jacParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1057
                self.match(jacParser.T__9)
                self.state = 1064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 1058
                    self.match(jacParser.LSQUARE)
                    self.state = 1059
                    self.match(jacParser.NAME)
                    self.state = 1061
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 1060
                        self.spawn_ctx()

                    self.state = 1063
                    self.match(jacParser.RSQUARE)

                self.state = 1066
                self.match(jacParser.T__7)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_valContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_val

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterList_val"):
                listener.enterList_val(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitList_val"):
                listener.exitList_val(self)

    def list_val(self):

        localctx = jacParser.List_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_list_val)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(jacParser.LSQUARE)
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__3)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.NODE_DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_SYNC)
                    )
                )
                != 0
            ) or (
                (((_la - 77)) & ~0x3F) == 0
                and (
                    (1 << (_la - 77))
                    & (
                        (1 << (jacParser.KW_REF - 77))
                        | (1 << (jacParser.NOT - 77))
                        | (1 << (jacParser.KW_GLOBAL - 77))
                        | (1 << (jacParser.PLUS - 77))
                        | (1 << (jacParser.MINUS - 77))
                        | (1 << (jacParser.STAR_MUL - 77))
                        | (1 << (jacParser.LPAREN - 77))
                        | (1 << (jacParser.LSQUARE - 77))
                        | (1 << (jacParser.FLOAT - 77))
                        | (1 << (jacParser.STRING - 77))
                        | (1 << (jacParser.BOOL - 77))
                        | (1 << (jacParser.INT - 77))
                        | (1 << (jacParser.NULL - 77))
                        | (1 << (jacParser.NAME - 77))
                    )
                )
                != 0
            ):
                self.state = 1070
                self.expr_list()

            self.state = 1073
            self.match(jacParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_sliceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_index_slice

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIndex_slice"):
                listener.enterIndex_slice(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIndex_slice"):
                listener.exitIndex_slice(self)

    def index_slice(self):

        localctx = jacParser.Index_sliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_index_slice)
        try:
            self.state = 1085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 129, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1075
                self.match(jacParser.LSQUARE)
                self.state = 1076
                self.expression()
                self.state = 1077
                self.match(jacParser.RSQUARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.match(jacParser.LSQUARE)
                self.state = 1080
                self.expression()
                self.state = 1081
                self.match(jacParser.COLON)
                self.state = 1082
                self.expression()
                self.state = 1083
                self.match(jacParser.RSQUARE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_valContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def kv_pair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(jacParser.Kv_pairContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dict_val

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDict_val"):
                listener.enterDict_val(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDict_val"):
                listener.exitDict_val(self)

    def dict_val(self):

        localctx = jacParser.Dict_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_dict_val)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(jacParser.LBRACE)
            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__3)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.NODE_DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_SYNC)
                    )
                )
                != 0
            ) or (
                (((_la - 77)) & ~0x3F) == 0
                and (
                    (1 << (_la - 77))
                    & (
                        (1 << (jacParser.KW_REF - 77))
                        | (1 << (jacParser.NOT - 77))
                        | (1 << (jacParser.KW_GLOBAL - 77))
                        | (1 << (jacParser.PLUS - 77))
                        | (1 << (jacParser.MINUS - 77))
                        | (1 << (jacParser.STAR_MUL - 77))
                        | (1 << (jacParser.LPAREN - 77))
                        | (1 << (jacParser.LSQUARE - 77))
                        | (1 << (jacParser.FLOAT - 77))
                        | (1 << (jacParser.STRING - 77))
                        | (1 << (jacParser.BOOL - 77))
                        | (1 << (jacParser.INT - 77))
                        | (1 << (jacParser.NULL - 77))
                        | (1 << (jacParser.NAME - 77))
                    )
                )
                != 0
            ):
                self.state = 1088
                self.kv_pair()
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1089
                    self.match(jacParser.COMMA)
                    self.state = 1090
                    self.kv_pair()
                    self.state = 1095
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1098
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Kv_pairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_kv_pair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKv_pair"):
                listener.enterKv_pair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKv_pair"):
                listener.exitKv_pair(self)

    def kv_pair(self):

        localctx = jacParser.Kv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_kv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.expression()
            self.state = 1101
            self.match(jacParser.COLON)
            self.state = 1102
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def spawn_object(self):
            return self.getTypedRuleContext(jacParser.Spawn_objectContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn"):
                listener.enterSpawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn"):
                listener.exitSpawn(self)

    def spawn(self):

        localctx = jacParser.SpawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(jacParser.KW_SPAWN)
            self.state = 1105
            self.spawn_object()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_objectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_spawn(self):
            return self.getTypedRuleContext(jacParser.Node_spawnContext, 0)

        def walker_spawn(self):
            return self.getTypedRuleContext(jacParser.Walker_spawnContext, 0)

        def graph_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_spawnContext, 0)

        def type_spawn(self):
            return self.getTypedRuleContext(jacParser.Type_spawnContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_object

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_object"):
                listener.enterSpawn_object(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_object"):
                listener.exitSpawn_object(self)

    def spawn_object(self):

        localctx = jacParser.Spawn_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_spawn_object)
        try:
            self.state = 1111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 132, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1107
                self.node_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1108
                self.walker_spawn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1109
                self.graph_spawn()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1110
                self.type_spawn()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_edgeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def connect_op(self):
            return self.getTypedRuleContext(jacParser.Connect_opContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_edge

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_edge"):
                listener.enterSpawn_edge(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_edge"):
                listener.exitSpawn_edge(self)

    def spawn_edge(self):

        localctx = jacParser.Spawn_edgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_spawn_edge)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.expression()
            self.state = 1114
            self.connect_op()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext, 0)

        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_spawn"):
                listener.enterNode_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_spawn"):
                listener.exitNode_spawn(self)

    def node_spawn(self):

        localctx = jacParser.Node_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_node_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
            if la_ == 1:
                self.state = 1116
                self.spawn_edge()

            self.state = 1119
            self.node_ref()
            self.state = 1121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
            if la_ == 1:
                self.state = 1120
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext, 0)

        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_spawn"):
                listener.enterGraph_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_spawn"):
                listener.exitGraph_spawn(self)

    def graph_spawn(self):

        localctx = jacParser.Graph_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_graph_spawn)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__3)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.NODE_DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_SYNC)
                    )
                )
                != 0
            ) or (
                (((_la - 77)) & ~0x3F) == 0
                and (
                    (1 << (_la - 77))
                    & (
                        (1 << (jacParser.KW_REF - 77))
                        | (1 << (jacParser.NOT - 77))
                        | (1 << (jacParser.KW_GLOBAL - 77))
                        | (1 << (jacParser.PLUS - 77))
                        | (1 << (jacParser.MINUS - 77))
                        | (1 << (jacParser.STAR_MUL - 77))
                        | (1 << (jacParser.LPAREN - 77))
                        | (1 << (jacParser.LSQUARE - 77))
                        | (1 << (jacParser.FLOAT - 77))
                        | (1 << (jacParser.STRING - 77))
                        | (1 << (jacParser.BOOL - 77))
                        | (1 << (jacParser.INT - 77))
                        | (1 << (jacParser.NULL - 77))
                        | (1 << (jacParser.NAME - 77))
                    )
                )
                != 0
            ):
                self.state = 1123
                self.spawn_edge()

            self.state = 1126
            self.graph_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext, 0)

        def KW_SYNC(self):
            return self.getToken(jacParser.KW_SYNC, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_spawn"):
                listener.enterWalker_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_spawn"):
                listener.exitWalker_spawn(self)

    def walker_spawn(self):

        localctx = jacParser.Walker_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_walker_spawn)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.expression()
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_SYNC:
                self.state = 1129
                self.match(jacParser.KW_SYNC)

            self.state = 1132
            self.walker_ref()
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 137, self._ctx)
            if la_ == 1:
                self.state = 1133
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_ref(self):
            return self.getTypedRuleContext(jacParser.Type_refContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_type_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_spawn"):
                listener.enterType_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_spawn"):
                listener.exitType_spawn(self)

    def type_spawn(self):

        localctx = jacParser.Type_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_type_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.type_ref()
            self.state = 1138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 138, self._ctx)
            if la_ == 1:
                self.state = 1137
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_ctxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def spawn_assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Spawn_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Spawn_assignContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_ctx

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_ctx"):
                listener.enterSpawn_ctx(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_ctx"):
                listener.exitSpawn_ctx(self)

    def spawn_ctx(self):

        localctx = jacParser.Spawn_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_spawn_ctx)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(jacParser.LPAREN)
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 1141
                self.spawn_assign()
                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1142
                    self.match(jacParser.COMMA)
                    self.state = 1143
                    self.spawn_assign()
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1151
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_ctxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def filter_compare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Filter_compareContext)
            else:
                return self.getTypedRuleContext(jacParser.Filter_compareContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_filter_ctx

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilter_ctx"):
                listener.enterFilter_ctx(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilter_ctx"):
                listener.exitFilter_ctx(self)

    def filter_ctx(self):

        localctx = jacParser.Filter_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_filter_ctx)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(jacParser.LPAREN)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 1154
                self.filter_compare()
                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1155
                    self.match(jacParser.COMMA)
                    self.state = 1156
                    self.filter_compare()
                    self.state = 1161
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1164
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_assign"):
                listener.enterSpawn_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_assign"):
                listener.exitSpawn_assign(self)

    def spawn_assign(self):

        localctx = jacParser.Spawn_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_spawn_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(jacParser.NAME)
            self.state = 1167
            self.match(jacParser.EQ)
            self.state = 1168
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_compareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def cmp_op(self):
            return self.getTypedRuleContext(jacParser.Cmp_opContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_filter_compare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilter_compare"):
                listener.enterFilter_compare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilter_compare"):
                listener.exitFilter_compare(self)

    def filter_compare(self):

        localctx = jacParser.Filter_compareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_filter_compare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.match(jacParser.NAME)
            self.state = 1171
            self.cmp_op()
            self.state = 1172
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def TYP_INT(self):
            return self.getToken(jacParser.TYP_INT, 0)

        def TYP_FLOAT(self):
            return self.getToken(jacParser.TYP_FLOAT, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def TYP_BOOL(self):
            return self.getToken(jacParser.TYP_BOOL, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_TYPE(self):
            return self.getToken(jacParser.KW_TYPE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_any_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAny_type"):
                listener.enterAny_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAny_type"):
                listener.exitAny_type(self)

    def any_type(self):

        localctx = jacParser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_any_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultistringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.STRING)
            else:
                return self.getToken(jacParser.STRING, i)

        def getRuleIndex(self):
            return jacParser.RULE_multistring

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultistring"):
                listener.enterMultistring(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultistring"):
                listener.exitMultistring(self)

    def multistring(self):

        localctx = jacParser.MultistringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_multistring)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1176
                    self.match(jacParser.STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 1179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 143, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[63] = self.atom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def atom_sempred(self, localctx: AtomContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 6)
